// Code generated by json2go. DO NOT EDIT.
package ospf

import (
	"bufio"
	"bytes"
	"encoding/binary"
	"encoding/json"
	"fmt"
	"io"
	"reflect"
)

type OspfpacketType uint8

const (
	OspfpacketType_Hello                    OspfpacketType = 1
	OspfpacketType_DatabaseDescription      OspfpacketType = 2
	OspfpacketType_LinkStateRequest         OspfpacketType = 3
	OspfpacketType_LinkStateUpdate          OspfpacketType = 4
	OspfpacketType_LinkStateAcknowledgement OspfpacketType = 5
)

func (t OspfpacketType) String() string {
	switch t {
	case OspfpacketType_Hello:
		return "Hello"
	case OspfpacketType_DatabaseDescription:
		return "DatabaseDescription"
	case OspfpacketType_LinkStateRequest:
		return "LinkStateRequest"
	case OspfpacketType_LinkStateUpdate:
		return "LinkStateUpdate"
	case OspfpacketType_LinkStateAcknowledgement:
		return "LinkStateAcknowledgement"
	}
	return fmt.Sprintf("OspfpacketType(%d)", t)
}

type Scoping int

const (
	Scoping_LinkLocal Scoping = 0
	Scoping_AreaLocal Scoping = 1
	Scoping_AsLocal   Scoping = 2
	Scoping_Reserved  Scoping = 3
)

func (t Scoping) String() string {
	switch t {
	case Scoping_LinkLocal:
		return "LinkLocal"
	case Scoping_AreaLocal:
		return "AreaLocal"
	case Scoping_AsLocal:
		return "AsLocal"
	case Scoping_Reserved:
		return "Reserved"
	}
	return fmt.Sprintf("Scoping(%d)", t)
}

type LsafunctionCode int

const (
	LsafunctionCode_RouterLsa           LsafunctionCode = 0x01
	LsafunctionCode_NetworkLsa          LsafunctionCode = 0x02
	LsafunctionCode_InterAreaPrefixLsa  LsafunctionCode = 0x03
	LsafunctionCode_InterAreaRouterLsa  LsafunctionCode = 0x04
	LsafunctionCode_AsExternalLsa       LsafunctionCode = 0x05
	LsafunctionCode_NssaLsa             LsafunctionCode = 0x07
	LsafunctionCode_LinkLsa             LsafunctionCode = 0x08
	LsafunctionCode_IntraAreaPrefixLsa  LsafunctionCode = 0x09
	LsafunctionCode_IntraAreaRouterLsa  LsafunctionCode = 0x0a
	LsafunctionCode_RouterInfoOpaqueLsa LsafunctionCode = 0x0b
	LsafunctionCode_Srv6LocatorLsa      LsafunctionCode = 42
)

func (t LsafunctionCode) String() string {
	switch t {
	case LsafunctionCode_RouterLsa:
		return "RouterLsa"
	case LsafunctionCode_NetworkLsa:
		return "NetworkLsa"
	case LsafunctionCode_InterAreaPrefixLsa:
		return "InterAreaPrefixLsa"
	case LsafunctionCode_InterAreaRouterLsa:
		return "InterAreaRouterLsa"
	case LsafunctionCode_AsExternalLsa:
		return "AsExternalLsa"
	case LsafunctionCode_NssaLsa:
		return "NssaLsa"
	case LsafunctionCode_LinkLsa:
		return "LinkLsa"
	case LsafunctionCode_IntraAreaPrefixLsa:
		return "IntraAreaPrefixLsa"
	case LsafunctionCode_IntraAreaRouterLsa:
		return "IntraAreaRouterLsa"
	case LsafunctionCode_RouterInfoOpaqueLsa:
		return "RouterInfoOpaqueLsa"
	case LsafunctionCode_Srv6LocatorLsa:
		return "Srv6LocatorLsa"
	}
	return fmt.Sprintf("LsafunctionCode(%d)", t)
}

type RouterInfoTlvtype uint16

const (
	RouterInfoTlvtype_Capabilities           RouterInfoTlvtype = 1
	RouterInfoTlvtype_FunctionalCapabilities RouterInfoTlvtype = 2
	RouterInfoTlvtype_Srv6Capabilities       RouterInfoTlvtype = 20
)

func (t RouterInfoTlvtype) String() string {
	switch t {
	case RouterInfoTlvtype_Capabilities:
		return "Capabilities"
	case RouterInfoTlvtype_FunctionalCapabilities:
		return "FunctionalCapabilities"
	case RouterInfoTlvtype_Srv6Capabilities:
		return "Srv6Capabilities"
	}
	return fmt.Sprintf("RouterInfoTlvtype(%d)", t)
}

type Srv6LocatorLsatlvtype uint16

const (
	Srv6LocatorLsatlvtype_Locator Srv6LocatorLsatlvtype = 1
)

func (t Srv6LocatorLsatlvtype) String() string {
	switch t {
	case Srv6LocatorLsatlvtype_Locator:
		return "Locator"
	}
	return fmt.Sprintf("Srv6LocatorLsatlvtype(%d)", t)
}

type OspfrouteType uint8

const (
	OspfrouteType_IntraAreaPrefix OspfrouteType = 1
	OspfrouteType_InterAreaPrefix OspfrouteType = 2
	OspfrouteType_External1       OspfrouteType = 3
	OspfrouteType_External2       OspfrouteType = 4
	OspfrouteType_Nssa1           OspfrouteType = 5
	OspfrouteType_Nssa2           OspfrouteType = 6
)

func (t OspfrouteType) String() string {
	switch t {
	case OspfrouteType_IntraAreaPrefix:
		return "IntraAreaPrefix"
	case OspfrouteType_InterAreaPrefix:
		return "InterAreaPrefix"
	case OspfrouteType_External1:
		return "External1"
	case OspfrouteType_External2:
		return "External2"
	case OspfrouteType_Nssa1:
		return "Nssa1"
	case OspfrouteType_Nssa2:
		return "Nssa2"
	}
	return fmt.Sprintf("OspfrouteType(%d)", t)
}

type EndpointBehavior uint16

const (
	EndpointBehavior_Reserved                   EndpointBehavior = 0
	EndpointBehavior_End                        EndpointBehavior = 1
	EndpointBehavior_EndWithPsp                 EndpointBehavior = 2
	EndpointBehavior_EndWithUsp                 EndpointBehavior = 3
	EndpointBehavior_EndWithPspAndUsp           EndpointBehavior = 4
	EndpointBehavior_EndX                       EndpointBehavior = 5
	EndpointBehavior_EndXwithPsp                EndpointBehavior = 6
	EndpointBehavior_EndXwithUsp                EndpointBehavior = 7
	EndpointBehavior_EndXwithPspAndUsp          EndpointBehavior = 8
	EndpointBehavior_EndT                       EndpointBehavior = 9
	EndpointBehavior_EndTwithPsp                EndpointBehavior = 10
	EndpointBehavior_EndTwithUsp                EndpointBehavior = 11
	EndpointBehavior_EndTwithPspAndUsp          EndpointBehavior = 12
	EndpointBehavior_Unassigned                 EndpointBehavior = 13
	EndpointBehavior_EndB6Encaps                EndpointBehavior = 14
	EndpointBehavior_EndBm                      EndpointBehavior = 15
	EndpointBehavior_EndDx6                     EndpointBehavior = 16
	EndpointBehavior_EndDx4                     EndpointBehavior = 17
	EndpointBehavior_EndDt6                     EndpointBehavior = 18
	EndpointBehavior_EndDt4                     EndpointBehavior = 19
	EndpointBehavior_EndDt46                    EndpointBehavior = 20
	EndpointBehavior_EndDx2                     EndpointBehavior = 21
	EndpointBehavior_EndDx2V                    EndpointBehavior = 22
	EndpointBehavior_EndDx2U                    EndpointBehavior = 23
	EndpointBehavior_EndDx2M                    EndpointBehavior = 24
	EndpointBehavior_Reserved2                  EndpointBehavior = 25
	EndpointBehavior_Unassigned2                EndpointBehavior = 26
	EndpointBehavior_EndB6EncapsRed             EndpointBehavior = 27
	EndpointBehavior_EndWithUsd                 EndpointBehavior = 28
	EndpointBehavior_EndWithPspAndUsd           EndpointBehavior = 29
	EndpointBehavior_EndWithUspAndUsd           EndpointBehavior = 30
	EndpointBehavior_EndXwithUsd                EndpointBehavior = 31
	EndpointBehavior_EndXwithPspAndUsd          EndpointBehavior = 32
	EndpointBehavior_EndXwithUspAndUsd          EndpointBehavior = 33
	EndpointBehavior_EndXwithPspUspAndUsd       EndpointBehavior = 34
	EndpointBehavior_EndTwithPspAndUsd          EndpointBehavior = 35
	EndpointBehavior_EndTwithUspAndUsd          EndpointBehavior = 36
	EndpointBehavior_EndTwithPspUspAndUsd       EndpointBehavior = 37
	EndpointBehavior_SidDefinedInRfc8754        EndpointBehavior = 0x7fff
	EndpointBehavior_ReservedForPrivateUseBegin EndpointBehavior = 0x8000
	EndpointBehavior_ReservedForPrivateUseEnd   EndpointBehavior = 0xfffe
	EndpointBehavior_Opaque                     EndpointBehavior = 0xffff
)

func (t EndpointBehavior) String() string {
	switch t {
	case EndpointBehavior_Reserved:
		return "Reserved"
	case EndpointBehavior_End:
		return "End"
	case EndpointBehavior_EndWithPsp:
		return "EndWithPsp"
	case EndpointBehavior_EndWithUsp:
		return "EndWithUsp"
	case EndpointBehavior_EndWithPspAndUsp:
		return "EndWithPspAndUsp"
	case EndpointBehavior_EndX:
		return "EndX"
	case EndpointBehavior_EndXwithPsp:
		return "EndXwithPsp"
	case EndpointBehavior_EndXwithUsp:
		return "EndXwithUsp"
	case EndpointBehavior_EndXwithPspAndUsp:
		return "EndXwithPspAndUsp"
	case EndpointBehavior_EndT:
		return "EndT"
	case EndpointBehavior_EndTwithPsp:
		return "EndTwithPsp"
	case EndpointBehavior_EndTwithUsp:
		return "EndTwithUsp"
	case EndpointBehavior_EndTwithPspAndUsp:
		return "EndTwithPspAndUsp"
	case EndpointBehavior_Unassigned:
		return "Unassigned"
	case EndpointBehavior_EndB6Encaps:
		return "EndB6Encaps"
	case EndpointBehavior_EndBm:
		return "EndBm"
	case EndpointBehavior_EndDx6:
		return "EndDx6"
	case EndpointBehavior_EndDx4:
		return "EndDx4"
	case EndpointBehavior_EndDt6:
		return "EndDt6"
	case EndpointBehavior_EndDt4:
		return "EndDt4"
	case EndpointBehavior_EndDt46:
		return "EndDt46"
	case EndpointBehavior_EndDx2:
		return "EndDx2"
	case EndpointBehavior_EndDx2V:
		return "EndDx2V"
	case EndpointBehavior_EndDx2U:
		return "EndDx2U"
	case EndpointBehavior_EndDx2M:
		return "EndDx2M"
	case EndpointBehavior_Reserved2:
		return "Reserved2"
	case EndpointBehavior_Unassigned2:
		return "Unassigned2"
	case EndpointBehavior_EndB6EncapsRed:
		return "EndB6EncapsRed"
	case EndpointBehavior_EndWithUsd:
		return "EndWithUsd"
	case EndpointBehavior_EndWithPspAndUsd:
		return "EndWithPspAndUsd"
	case EndpointBehavior_EndWithUspAndUsd:
		return "EndWithUspAndUsd"
	case EndpointBehavior_EndXwithUsd:
		return "EndXwithUsd"
	case EndpointBehavior_EndXwithPspAndUsd:
		return "EndXwithPspAndUsd"
	case EndpointBehavior_EndXwithUspAndUsd:
		return "EndXwithUspAndUsd"
	case EndpointBehavior_EndXwithPspUspAndUsd:
		return "EndXwithPspUspAndUsd"
	case EndpointBehavior_EndTwithPspAndUsd:
		return "EndTwithPspAndUsd"
	case EndpointBehavior_EndTwithUspAndUsd:
		return "EndTwithUspAndUsd"
	case EndpointBehavior_EndTwithPspUspAndUsd:
		return "EndTwithPspUspAndUsd"
	case EndpointBehavior_SidDefinedInRfc8754:
		return "SidDefinedInRfc8754"
	case EndpointBehavior_ReservedForPrivateUseBegin:
		return "ReservedForPrivateUseBegin"
	case EndpointBehavior_ReservedForPrivateUseEnd:
		return "ReservedForPrivateUseEnd"
	case EndpointBehavior_Opaque:
		return "Opaque"
	}
	return fmt.Sprintf("EndpointBehavior(%d)", t)
}

type LocatorTlvsubTlvtype uint16

const (
	LocatorTlvsubTlvtype_Srv6EndSid                    LocatorTlvsubTlvtype = 1
	LocatorTlvsubTlvtype_Ipv6ForwardingAddress         LocatorTlvsubTlvtype = 2
	LocatorTlvsubTlvtype_RouteTag                      LocatorTlvsubTlvtype = 3
	LocatorTlvsubTlvtype_PrefixSourceOspfRouterId      LocatorTlvsubTlvtype = 4
	LocatorTlvsubTlvtype_PrefixSourceOspfRouterAddress LocatorTlvsubTlvtype = 5
	LocatorTlvsubTlvtype_Srv6SidStructure              LocatorTlvsubTlvtype = 10
)

func (t LocatorTlvsubTlvtype) String() string {
	switch t {
	case LocatorTlvsubTlvtype_Srv6EndSid:
		return "Srv6EndSid"
	case LocatorTlvsubTlvtype_Ipv6ForwardingAddress:
		return "Ipv6ForwardingAddress"
	case LocatorTlvsubTlvtype_RouteTag:
		return "RouteTag"
	case LocatorTlvsubTlvtype_PrefixSourceOspfRouterId:
		return "PrefixSourceOspfRouterId"
	case LocatorTlvsubTlvtype_PrefixSourceOspfRouterAddress:
		return "PrefixSourceOspfRouterAddress"
	case LocatorTlvsubTlvtype_Srv6SidStructure:
		return "Srv6SidStructure"
	}
	return fmt.Sprintf("LocatorTlvsubTlvtype(%d)", t)
}

type Ospfheader struct {
	Version      uint8
	Type         OspfpacketType
	PacketLength uint16
	RouterId     uint32
	AreaId       uint32
	CheckSum     uint16
	InstanceId   uint8
	Zero         uint8
}
type VisitorTIJJO interface {
	Visit(v VisitorTIJJO, name string, field any)
}
type VisitorTIJJOFunc func(v VisitorTIJJO, name string, field any)

func (f VisitorTIJJOFunc) Visit(v VisitorTIJJO, name string, field any) {
	f(v, name, field)
}

type VisitorTIJJOVisitable interface {
	Visit(v VisitorTIJJO)
}

func VisitorTIJJOToMap(v any) interface{} {
	if v == nil {
		return nil
	}
	if inter, ok := v.(VisitorTIJJOVisitable); ok {
		if p := reflect.ValueOf(inter); p.Kind() == reflect.Pointer && p.IsNil() {
			return nil
		}
		m := map[string]interface{}{}
		inter.Visit(VisitorTIJJOFunc(func(v VisitorTIJJO, name string, field any) {
			m[name] = VisitorTIJJOToMap(field)
		}))
		return m
	}
	if tf := reflect.TypeOf(v); (tf.Kind() == reflect.Slice || tf.Kind() == reflect.Array) && !(func() bool { k := tf.Elem().Kind().String(); return k[:3] == "int" || k[:3] == "uin" || k[:3] == "flo" })() {
		m := []interface{}{}
		vf := reflect.ValueOf(v)
		for i := 0; i < vf.Len(); i++ {
			index := vf.Index(i)
			if index.Kind() == reflect.Struct && index.CanAddr() {
				index = index.Addr()
			}
			m = append(m, VisitorTIJJOToMap(index.Interface()))
		}
		return m
	}
	if tf := reflect.TypeOf(v); tf.Kind() == reflect.Pointer {
		val := reflect.ValueOf(v)
		if val.IsNil() {
			return nil
		}
		return VisitorTIJJOToMap(val.Elem().Interface())
	}
	return v
}

type HelloPacket struct {
	InterfaceId            uint32
	RtrPriority            uint8
	Options                uint32
	HelloInterval          uint16
	RouterDeadInterval     uint16
	DesignatedRouter       uint32
	BackupDesignatedRouter uint32
	Neighbors              []uint32
}
type OspflinkStateRequestPacket struct {
	Reserved          uint8
	LinkStateType     uint16
	LinkStateId       uint32
	AdvertisingRouter []uint32
}
type PrefixOptions struct {
	flags18 uint8
}
type Lsatype struct {
	flags19 uint16
}
type Option struct {
	Reserved uint16
	flags21  uint8
}
type RouterInfo struct {
	Type                uint8
	Reserved            uint8
	Metric              uint16
	InterfaceId         uint32
	NeighborInterfaceId uint32
	NeighborRouterId    uint32
}
type RouterInformationCapabilities struct {
	flags27 uint32
}
type FunctionalCapabilities struct {
	Capabilities []uint32
}
type Srv6CapabilitiesSubTlv struct {
	Type   uint16
	Length uint16
	Value  []uint8
}
type Srv6EndSidsubTlv struct {
	Type   uint16
	Length uint16
	Value  []uint8
}
type Srv6EndXsidsubTlvsubTlv struct {
	Type   uint16
	Length uint16
	Value  []uint8
}
type Srv6LanEndXsidsubTlvsubTlv struct {
	Type   uint16
	Length uint16
	Value  []uint8
}
type Srv6SidstructureSubTlv struct {
	LocatorBlockLength uint8
	LocatorNodeLength  uint8
	FunctionLength     uint8
	ArgumentsLength    uint8
}
type Ipv6ForwardingAddress struct {
	ForwardingAddress [16]uint8
}
type RouteTag struct {
	RouteTag uint32
}
type PrefixSourceRouterId struct {
	RouterId uint32
}
type PrefixSourceRouterAddress struct {
	RouterAddress []uint8
}
type LsaheaderChecksum struct {
	LsType            Lsatype
	LinkStateId       uint32
	AdvertisingRouter uint32
	LsSequenceNumber  uint32
	LsChecksum        uint16
	Length            uint16
}
type Lsaheader struct {
	LsAge          uint16
	HeaderChecksum LsaheaderChecksum
}
type RouterLsa struct {
	flags48  uint8
	Options  Option
	LinkInfo []RouterInfo
}
type NetworkLsa struct {
	Reserved        uint8
	Options         Option
	AttachedRouters []uint32
}
type AddressPrefix struct {
	PrefixLen uint8
	Options   PrefixOptions
	Reserved2 uint16
	Prefix    []uint8
}
type InterAreaPrefixLsa struct {
	Reserved uint8
	Metric   uint32
	Prefix   AddressPrefix
}
type InterAreaRouterLsa struct {
	Reserved     uint8
	Option       Option
	Reserved2    uint8
	Metric       uint32
	DestRouterId uint32
}
type union58_AsexternalLsa interface {
	isunion57_()
}
type union_59_t struct {
	ForwardingAddress [16]uint8
}
type union61_AsexternalLsa interface {
	isunion60_()
}
type union_62_t struct {
	ExternalRouteTag uint32
}
type union64_AsexternalLsa interface {
	isunion63_()
}
type union_65_t struct {
	ReferencedLinkStateId uint32
}
type AsexternalLsa struct {
	flags56          uint8
	Metric           uint32
	PrefixLen        uint8
	PrefixOptions    PrefixOptions
	ReferencedLsType uint16
	union57_         union58_AsexternalLsa
	union60_         union61_AsexternalLsa
	union63_         union64_AsexternalLsa
}
type LinkLsa struct {
	RtrPriority               uint8
	Options                   Option
	LinkLocalInterfaceAddress [16]uint8
	NumPrefixes               uint16
	Prefixes                  []AddressPrefix
}
type IntraAreaPrefixLsa struct {
	NumPrefixes           uint16
	ReferencedLsType      uint16
	ReferencedLinkStateId uint32
	Prefixes              []AddressPrefix
}
type Srv6Capabilities struct {
	Reserved1 uint8
	flags77   uint8
	Reserved4 uint16
	Tlvs      []Srv6CapabilitiesSubTlv
}
type union82_RouterInfoOpaqueLsatlv interface {
	isunion81_()
}
type union_83_t struct {
	Capabilities RouterInformationCapabilities
}
type union_84_t struct {
	FunctionalCapabilities FunctionalCapabilities
}
type union_85_t struct {
	Srv6Capabilities Srv6Capabilities
}
type union_86_t struct {
	Value []uint8
}
type RouterInfoOpaqueLsatlv struct {
	Type     RouterInfoTlvtype
	Length   uint16
	union81_ union82_RouterInfoOpaqueLsatlv
}
type RouterInfoOpaqueLsa struct {
	Tlvs []RouterInfoOpaqueLsatlv
}
type Srv6EndSid struct {
	Flags    uint8
	Reserved uint8
	Behavior EndpointBehavior
	Sid      [16]uint8
	SubTlvs  []Srv6EndSidsubTlv
}
type union101_LocatorTlvsubTlv interface {
	isunion100_()
}
type union_102_t struct {
	Srv6EndSid Srv6EndSid
}
type union_103_t struct {
	Ipv6ForwardingAddress Ipv6ForwardingAddress
}
type union_104_t struct {
	RouteTag RouteTag
}
type union_105_t struct {
	PrefixSourceOspfRouterId PrefixSourceRouterId
}
type union_106_t struct {
	PrefixSourceOspfRouterAddress PrefixSourceRouterAddress
}
type union_107_t struct {
	Srv6SidStructure Srv6SidstructureSubTlv
}
type union_108_t struct {
	Value []uint8
}
type LocatorTlvsubTlv struct {
	Type      LocatorTlvsubTlvtype
	Length    uint16
	union100_ union101_LocatorTlvsubTlv
}
type LocatorTlv struct {
	RouteType     OspfrouteType
	Algorithm     uint8
	LocatorLength uint8
	PrefixOptions PrefixOptions
	Metric        uint32
	Locator       []uint8
	SubTlvs       []LocatorTlvsubTlv
}
type union127_Srv6LocatorLsatlv interface {
	isunion126_()
}
type union_128_t struct {
	Locator LocatorTlv
}
type union_129_t struct {
	Value []uint8
}
type Srv6LocatorLsatlv struct {
	Type      Srv6LocatorLsatlvtype
	Length    uint16
	union126_ union127_Srv6LocatorLsatlv
}
type Srv6LocatorLsa struct {
	Tlvs []Srv6LocatorLsatlv
}
type union137_Lsa interface {
	isunion136_()
}
type union_138_t struct {
	RouterLsa RouterLsa
}
type union_139_t struct {
	NetworkLsa NetworkLsa
}
type union_140_t struct {
	InterAreaPrefixLsa InterAreaPrefixLsa
}
type union_141_t struct {
	InterAreaRouterLsa InterAreaRouterLsa
}
type union_142_t struct {
	AsExternalLsa AsexternalLsa
}
type union_143_t struct {
	LinkLsa LinkLsa
}
type union_144_t struct {
	IntraAreaPrefixLsa IntraAreaPrefixLsa
}
type union_145_t struct {
	RouterInfoOpaqueLsa RouterInfoOpaqueLsa
}
type union_146_t struct {
	Srv6LocatorLsa Srv6LocatorLsa
}
type union_147_t struct {
	Data []uint8
}
type Lsa struct {
	LsaHeader Lsaheader
	union136_ union137_Lsa
}
type OspflinkStateUpdatePacket struct {
	NumLsa     uint32
	LsaHeaders []Lsa
}
type OspflinkStateAcknowledgementPacket struct {
	LsaHeaders []Lsaheader
}
type Srv6EndXsidsubTlv struct {
	Behavior  EndpointBehavior
	Flags     uint8
	Reserved  uint8
	Algorithm uint8
	Weight    uint8
	Reserved2 uint16
	Sid       [16]uint8
	SubTlvs   []Srv6EndXsidsubTlvsubTlv
}
type Srv6LanEndXsidsubTlv struct {
	Behavior         EndpointBehavior
	Flags            uint8
	Reserved         uint8
	Algorithm        uint8
	Weight           uint8
	Reserved2        uint16
	NeighborRouterId uint32
	Sid              [16]uint8
	SubTlvs          []Srv6LanEndXsidsubTlvsubTlv
}
type DatabaseDescriptionPacket struct {
	Reserved         uint8
	Options          Option
	InterfaceMtu     uint16
	Reserved2        uint8
	flags180         uint8
	DdSequenceNumber uint32
	LsaHeaders       []Lsaheader
}
type union186_Ospfpacket interface {
	isunion185_()
}
type union_187_t struct {
	HelloPacket HelloPacket
}
type union_188_t struct {
	DatabaseDescriptionPacket DatabaseDescriptionPacket
}
type union_189_t struct {
	OspfLinkStateRequestPacket OspflinkStateRequestPacket
}
type union_190_t struct {
	OspfLinkStateUpdatePacket OspflinkStateUpdatePacket
}
type union_191_t struct {
	OspfLinkStateAcknowledgementPacket OspflinkStateAcknowledgementPacket
}
type union_192_t struct {
	Data []uint8
}
type Ospfpacket struct {
	Header    Ospfheader
	union185_ union186_Ospfpacket
}

func (t *Ospfheader) Visit(v VisitorTIJJO) {
	v.Visit(v, "Version", &t.Version)
	v.Visit(v, "Type", &t.Type)
	v.Visit(v, "PacketLength", &t.PacketLength)
	v.Visit(v, "RouterId", &t.RouterId)
	v.Visit(v, "AreaId", &t.AreaId)
	v.Visit(v, "CheckSum", &t.CheckSum)
	v.Visit(v, "InstanceId", &t.InstanceId)
	v.Visit(v, "Zero", &t.Zero)
}
func (t *Ospfheader) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *Ospfheader) Write(w io.Writer) (err error) {
	if n, err := w.Write([]byte{byte(t.Version)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Version: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Type)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Type: %w", err)
	}
	tmp1 := [2]byte{}
	binary.BigEndian.PutUint16(tmp1[:], uint16(t.PacketLength))
	if n, err := w.Write(tmp1[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.PacketLength: %w", err)
	}
	tmp2 := [4]byte{}
	binary.BigEndian.PutUint32(tmp2[:], uint32(t.RouterId))
	if n, err := w.Write(tmp2[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.RouterId: %w", err)
	}
	tmp3 := [4]byte{}
	binary.BigEndian.PutUint32(tmp3[:], uint32(t.AreaId))
	if n, err := w.Write(tmp3[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.AreaId: %w", err)
	}
	tmp4 := [2]byte{}
	binary.BigEndian.PutUint16(tmp4[:], uint16(t.CheckSum))
	if n, err := w.Write(tmp4[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.CheckSum: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.InstanceId)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.InstanceId: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Zero)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Zero: %w", err)
	}
	return nil
}
func (t *Ospfheader) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 16))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *Ospfheader) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *Ospfheader) Read(r io.Reader) (err error) {
	tmpVersion := [1]byte{}
	n_Version, err := io.ReadFull(r, tmpVersion[:])
	if err != nil {
		return fmt.Errorf("read Version: expect 1 byte but read %d bytes: %w", n_Version, err)
	}
	t.Version = uint8(tmpVersion[0])
	tmpType := [1]byte{}
	n_Type, err := io.ReadFull(r, tmpType[:])
	if err != nil {
		return fmt.Errorf("read Type: expect 1 byte but read %d bytes: %w", n_Type, err)
	}
	t.Type = OspfpacketType(tmpType[0])
	tmpPacketLength := [2]byte{}
	n_PacketLength, err := io.ReadFull(r, tmpPacketLength[:])
	if err != nil {
		return fmt.Errorf("read PacketLength: expect 2 bytes but read %d bytes: %w", n_PacketLength, err)
	}
	t.PacketLength = uint16(binary.BigEndian.Uint16(tmpPacketLength[:]))
	tmpRouterId := [4]byte{}
	n_RouterId, err := io.ReadFull(r, tmpRouterId[:])
	if err != nil {
		return fmt.Errorf("read RouterId: expect 4 bytes but read %d bytes: %w", n_RouterId, err)
	}
	t.RouterId = uint32(binary.BigEndian.Uint32(tmpRouterId[:]))
	tmpAreaId := [4]byte{}
	n_AreaId, err := io.ReadFull(r, tmpAreaId[:])
	if err != nil {
		return fmt.Errorf("read AreaId: expect 4 bytes but read %d bytes: %w", n_AreaId, err)
	}
	t.AreaId = uint32(binary.BigEndian.Uint32(tmpAreaId[:]))
	tmpCheckSum := [2]byte{}
	n_CheckSum, err := io.ReadFull(r, tmpCheckSum[:])
	if err != nil {
		return fmt.Errorf("read CheckSum: expect 2 bytes but read %d bytes: %w", n_CheckSum, err)
	}
	t.CheckSum = uint16(binary.BigEndian.Uint16(tmpCheckSum[:]))
	tmpInstanceId := [1]byte{}
	n_InstanceId, err := io.ReadFull(r, tmpInstanceId[:])
	if err != nil {
		return fmt.Errorf("read InstanceId: expect 1 byte but read %d bytes: %w", n_InstanceId, err)
	}
	t.InstanceId = uint8(tmpInstanceId[0])
	tmpZero := [1]byte{}
	n_Zero, err := io.ReadFull(r, tmpZero[:])
	if err != nil {
		return fmt.Errorf("read Zero: expect 1 byte but read %d bytes: %w", n_Zero, err)
	}
	t.Zero = uint8(tmpZero[0])
	return nil
}

func (t *Ospfheader) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *Ospfheader) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode Ospfheader: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *HelloPacket) Visit(v VisitorTIJJO) {
	v.Visit(v, "InterfaceId", &t.InterfaceId)
	v.Visit(v, "RtrPriority", &t.RtrPriority)
	v.Visit(v, "Options", &t.Options)
	v.Visit(v, "HelloInterval", &t.HelloInterval)
	v.Visit(v, "RouterDeadInterval", &t.RouterDeadInterval)
	v.Visit(v, "DesignatedRouter", &t.DesignatedRouter)
	v.Visit(v, "BackupDesignatedRouter", &t.BackupDesignatedRouter)
	v.Visit(v, "Neighbors", &t.Neighbors)
}
func (t *HelloPacket) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *HelloPacket) Write(w io.Writer) (err error) {
	tmp5 := [4]byte{}
	binary.BigEndian.PutUint32(tmp5[:], uint32(t.InterfaceId))
	if n, err := w.Write(tmp5[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.InterfaceId: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.RtrPriority)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.RtrPriority: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Options >> 16), byte(t.Options >> 8), byte(t.Options)}); err != nil || n != 3 {
		return fmt.Errorf("encode t.Options: %w", err)
	}
	tmp6 := [2]byte{}
	binary.BigEndian.PutUint16(tmp6[:], uint16(t.HelloInterval))
	if n, err := w.Write(tmp6[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.HelloInterval: %w", err)
	}
	tmp7 := [2]byte{}
	binary.BigEndian.PutUint16(tmp7[:], uint16(t.RouterDeadInterval))
	if n, err := w.Write(tmp7[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.RouterDeadInterval: %w", err)
	}
	tmp8 := [4]byte{}
	binary.BigEndian.PutUint32(tmp8[:], uint32(t.DesignatedRouter))
	if n, err := w.Write(tmp8[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.DesignatedRouter: %w", err)
	}
	tmp9 := [4]byte{}
	binary.BigEndian.PutUint32(tmp9[:], uint32(t.BackupDesignatedRouter))
	if n, err := w.Write(tmp9[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.BackupDesignatedRouter: %w", err)
	}
	for _, v := range t.Neighbors {
		tmp10 := [4]byte{}
		binary.BigEndian.PutUint32(tmp10[:], uint32(v))
		if n, err := w.Write(tmp10[:]); err != nil || n != 4 {
			return fmt.Errorf("encode v: %w", err)
		}
	}
	return nil
}
func (t *HelloPacket) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 20))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *HelloPacket) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *HelloPacket) Read(r io.Reader) (err error) {
	tmpInterfaceId := [4]byte{}
	n_InterfaceId, err := io.ReadFull(r, tmpInterfaceId[:])
	if err != nil {
		return fmt.Errorf("read InterfaceId: expect 4 bytes but read %d bytes: %w", n_InterfaceId, err)
	}
	t.InterfaceId = uint32(binary.BigEndian.Uint32(tmpInterfaceId[:]))
	tmpRtrPriority := [1]byte{}
	n_RtrPriority, err := io.ReadFull(r, tmpRtrPriority[:])
	if err != nil {
		return fmt.Errorf("read RtrPriority: expect 1 byte but read %d bytes: %w", n_RtrPriority, err)
	}
	t.RtrPriority = uint8(tmpRtrPriority[0])
	tmpOptions := [3]byte{}
	n_Options, err := io.ReadFull(r, tmpOptions[:])
	if err != nil {
		return fmt.Errorf("read Options: expect 3 bytes but read %d bytes: %w", n_Options, err)
	}
	t.Options = uint32(uint32(tmpOptions[0])<<16 | uint32(tmpOptions[1])<<8 | uint32(tmpOptions[2]))
	tmpHelloInterval := [2]byte{}
	n_HelloInterval, err := io.ReadFull(r, tmpHelloInterval[:])
	if err != nil {
		return fmt.Errorf("read HelloInterval: expect 2 bytes but read %d bytes: %w", n_HelloInterval, err)
	}
	t.HelloInterval = uint16(binary.BigEndian.Uint16(tmpHelloInterval[:]))
	tmpRouterDeadInterval := [2]byte{}
	n_RouterDeadInterval, err := io.ReadFull(r, tmpRouterDeadInterval[:])
	if err != nil {
		return fmt.Errorf("read RouterDeadInterval: expect 2 bytes but read %d bytes: %w", n_RouterDeadInterval, err)
	}
	t.RouterDeadInterval = uint16(binary.BigEndian.Uint16(tmpRouterDeadInterval[:]))
	tmpDesignatedRouter := [4]byte{}
	n_DesignatedRouter, err := io.ReadFull(r, tmpDesignatedRouter[:])
	if err != nil {
		return fmt.Errorf("read DesignatedRouter: expect 4 bytes but read %d bytes: %w", n_DesignatedRouter, err)
	}
	t.DesignatedRouter = uint32(binary.BigEndian.Uint32(tmpDesignatedRouter[:]))
	tmpBackupDesignatedRouter := [4]byte{}
	n_BackupDesignatedRouter, err := io.ReadFull(r, tmpBackupDesignatedRouter[:])
	if err != nil {
		return fmt.Errorf("read BackupDesignatedRouter: expect 4 bytes but read %d bytes: %w", n_BackupDesignatedRouter, err)
	}
	t.BackupDesignatedRouter = uint32(binary.BigEndian.Uint32(tmpBackupDesignatedRouter[:]))
	tmp_byte_scanner11_ := bufio.NewReaderSize(r, 1)
	old_r_Neighbors := r
	r = tmp_byte_scanner11_
	for {
		_, err := tmp_byte_scanner11_.ReadByte()
		if err != nil {
			if err != io.EOF {
				return fmt.Errorf("read Neighbors: %w", err)
			}
			break
		}
		if err := tmp_byte_scanner11_.UnreadByte(); err != nil {
			return fmt.Errorf("read Neighbors: unexpected unread error: %w", err)
		}
		var tmp12_ uint32
		tmpNeighbors := [4]byte{}
		n_Neighbors, err := io.ReadFull(r, tmpNeighbors[:])
		if err != nil {
			return fmt.Errorf("read Neighbors: expect 4 bytes but read %d bytes: %w", n_Neighbors, err)
		}
		tmp12_ = uint32(binary.BigEndian.Uint32(tmpNeighbors[:]))
		t.Neighbors = append(t.Neighbors, tmp12_)
	}
	r = old_r_Neighbors
	return nil
}

func (t *HelloPacket) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *HelloPacket) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode HelloPacket: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *OspflinkStateRequestPacket) Visit(v VisitorTIJJO) {
	v.Visit(v, "Reserved", &t.Reserved)
	v.Visit(v, "LinkStateType", &t.LinkStateType)
	v.Visit(v, "LinkStateId", &t.LinkStateId)
	v.Visit(v, "AdvertisingRouter", &t.AdvertisingRouter)
}
func (t *OspflinkStateRequestPacket) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *OspflinkStateRequestPacket) Write(w io.Writer) (err error) {
	if n, err := w.Write([]byte{byte(t.Reserved)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Reserved: %w", err)
	}
	tmp13 := [2]byte{}
	binary.BigEndian.PutUint16(tmp13[:], uint16(t.LinkStateType))
	if n, err := w.Write(tmp13[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.LinkStateType: %w", err)
	}
	tmp14 := [4]byte{}
	binary.BigEndian.PutUint32(tmp14[:], uint32(t.LinkStateId))
	if n, err := w.Write(tmp14[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.LinkStateId: %w", err)
	}
	for _, v := range t.AdvertisingRouter {
		tmp15 := [4]byte{}
		binary.BigEndian.PutUint32(tmp15[:], uint32(v))
		if n, err := w.Write(tmp15[:]); err != nil || n != 4 {
			return fmt.Errorf("encode v: %w", err)
		}
	}
	return nil
}
func (t *OspflinkStateRequestPacket) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 7))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *OspflinkStateRequestPacket) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *OspflinkStateRequestPacket) Read(r io.Reader) (err error) {
	tmpReserved := [1]byte{}
	n_Reserved, err := io.ReadFull(r, tmpReserved[:])
	if err != nil {
		return fmt.Errorf("read Reserved: expect 1 byte but read %d bytes: %w", n_Reserved, err)
	}
	t.Reserved = uint8(tmpReserved[0])
	tmpLinkStateType := [2]byte{}
	n_LinkStateType, err := io.ReadFull(r, tmpLinkStateType[:])
	if err != nil {
		return fmt.Errorf("read LinkStateType: expect 2 bytes but read %d bytes: %w", n_LinkStateType, err)
	}
	t.LinkStateType = uint16(binary.BigEndian.Uint16(tmpLinkStateType[:]))
	tmpLinkStateId := [4]byte{}
	n_LinkStateId, err := io.ReadFull(r, tmpLinkStateId[:])
	if err != nil {
		return fmt.Errorf("read LinkStateId: expect 4 bytes but read %d bytes: %w", n_LinkStateId, err)
	}
	t.LinkStateId = uint32(binary.BigEndian.Uint32(tmpLinkStateId[:]))
	tmp_byte_scanner16_ := bufio.NewReaderSize(r, 1)
	old_r_AdvertisingRouter := r
	r = tmp_byte_scanner16_
	for {
		_, err := tmp_byte_scanner16_.ReadByte()
		if err != nil {
			if err != io.EOF {
				return fmt.Errorf("read AdvertisingRouter: %w", err)
			}
			break
		}
		if err := tmp_byte_scanner16_.UnreadByte(); err != nil {
			return fmt.Errorf("read AdvertisingRouter: unexpected unread error: %w", err)
		}
		var tmp17_ uint32
		tmpAdvertisingRouter := [4]byte{}
		n_AdvertisingRouter, err := io.ReadFull(r, tmpAdvertisingRouter[:])
		if err != nil {
			return fmt.Errorf("read AdvertisingRouter: expect 4 bytes but read %d bytes: %w", n_AdvertisingRouter, err)
		}
		tmp17_ = uint32(binary.BigEndian.Uint32(tmpAdvertisingRouter[:]))
		t.AdvertisingRouter = append(t.AdvertisingRouter, tmp17_)
	}
	r = old_r_AdvertisingRouter
	return nil
}

func (t *OspflinkStateRequestPacket) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *OspflinkStateRequestPacket) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode OspflinkStateRequestPacket: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *PrefixOptions) Reserved() uint8 {
	return ((t.flags18 & 0xe0) >> 5)
}
func (t *PrefixOptions) SetReserved(v uint8) bool {
	if v > 7 {
		return false
	}
	t.flags18 = (t.flags18 & ^uint8(0xe0)) | ((v & 0x7) << 5)
	return true
}
func (t *PrefixOptions) Dn() bool {
	return ((t.flags18 & 0x10) >> 4) == 1
}
func (t *PrefixOptions) SetDn(v bool) {
	if v {
		t.flags18 |= uint8(0x10)
	} else {
		t.flags18 &= ^uint8(0x10)
	}
}
func (t *PrefixOptions) Propagate() bool {
	return ((t.flags18 & 0x08) >> 3) == 1
}
func (t *PrefixOptions) SetPropagate(v bool) {
	if v {
		t.flags18 |= uint8(0x8)
	} else {
		t.flags18 &= ^uint8(0x8)
	}
}
func (t *PrefixOptions) Multicast() bool {
	return ((t.flags18 & 0x04) >> 2) == 1
}
func (t *PrefixOptions) SetMulticast(v bool) {
	if v {
		t.flags18 |= uint8(0x4)
	} else {
		t.flags18 &= ^uint8(0x4)
	}
}
func (t *PrefixOptions) LocalAddress() bool {
	return ((t.flags18 & 0x02) >> 1) == 1
}
func (t *PrefixOptions) SetLocalAddress(v bool) {
	if v {
		t.flags18 |= uint8(0x2)
	} else {
		t.flags18 &= ^uint8(0x2)
	}
}
func (t *PrefixOptions) NoUnicast() bool {
	return ((t.flags18 & 0x01) >> 0) == 1
}
func (t *PrefixOptions) SetNoUnicast(v bool) {
	if v {
		t.flags18 |= uint8(0x1)
	} else {
		t.flags18 &= ^uint8(0x1)
	}
}
func (t *PrefixOptions) Visit(v VisitorTIJJO) {
	v.Visit(v, "Reserved", t.Reserved())
	v.Visit(v, "Dn", (func() uint8 {
		if t.Dn() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "Propagate", (func() uint8 {
		if t.Propagate() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "Multicast", (func() uint8 {
		if t.Multicast() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "LocalAddress", (func() uint8 {
		if t.LocalAddress() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "NoUnicast", (func() uint8 {
		if t.NoUnicast() {
			return 1
		} else {
			return 0
		}
	}()))
}
func (t *PrefixOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *PrefixOptions) Write(w io.Writer) (err error) {
	if n, err := w.Write([]byte{byte(t.flags18)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.flags18: %w", err)
	}
	return nil
}
func (t *PrefixOptions) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 1))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *PrefixOptions) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *PrefixOptions) Read(r io.Reader) (err error) {
	tmpflags18 := [1]byte{}
	n_flags18, err := io.ReadFull(r, tmpflags18[:])
	if err != nil {
		return fmt.Errorf("read flags18: expect 1 byte but read %d bytes: %w", n_flags18, err)
	}
	t.flags18 = uint8(tmpflags18[0])
	return nil
}

func (t *PrefixOptions) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *PrefixOptions) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode PrefixOptions: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *Lsatype) Understand() bool {
	return ((t.flags19 & 0x8000) >> 15) == 1
}
func (t *Lsatype) SetUnderstand(v bool) {
	if v {
		t.flags19 |= uint16(0x8000)
	} else {
		t.flags19 &= ^uint16(0x8000)
	}
}
func (t *Lsatype) Scoping() Scoping {
	return Scoping(((t.flags19 & 0x6000) >> 13))
}
func (t *Lsatype) SetScoping(v Scoping) bool {
	if v > 3 {
		return false
	}
	t.flags19 = (t.flags19 & ^uint16(0x6000)) | ((uint16(v) & 0x3) << 13)
	return true
}
func (t *Lsatype) Code() LsafunctionCode {
	return LsafunctionCode(((t.flags19 & 0x1fff) >> 0))
}
func (t *Lsatype) SetCode(v LsafunctionCode) bool {
	if v > 8191 {
		return false
	}
	t.flags19 = (t.flags19 & ^uint16(0x1fff)) | ((uint16(v) & 0x1fff) << 0)
	return true
}
func (t *Lsatype) Visit(v VisitorTIJJO) {
	v.Visit(v, "Understand", (func() uint16 {
		if t.Understand() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "Scoping", t.Scoping())
	v.Visit(v, "Code", t.Code())
}
func (t *Lsatype) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *Lsatype) Write(w io.Writer) (err error) {
	tmp20 := [2]byte{}
	binary.BigEndian.PutUint16(tmp20[:], uint16(t.flags19))
	if n, err := w.Write(tmp20[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.flags19: %w", err)
	}
	return nil
}
func (t *Lsatype) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 2))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *Lsatype) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *Lsatype) Read(r io.Reader) (err error) {
	tmpflags19 := [2]byte{}
	n_flags19, err := io.ReadFull(r, tmpflags19[:])
	if err != nil {
		return fmt.Errorf("read flags19: expect 2 bytes but read %d bytes: %w", n_flags19, err)
	}
	t.flags19 = uint16(binary.BigEndian.Uint16(tmpflags19[:]))
	return nil
}

func (t *Lsatype) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *Lsatype) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode Lsatype: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *Option) Ospfv2Compat() uint8 {
	return ((t.flags21 & 0xc0) >> 6)
}
func (t *Option) SetOspfv2Compat(v uint8) bool {
	if v > 3 {
		return false
	}
	t.flags21 = (t.flags21 & ^uint8(0xc0)) | ((v & 0x3) << 6)
	return true
}
func (t *Option) DemandCircuit() bool {
	return ((t.flags21 & 0x20) >> 5) == 1
}
func (t *Option) SetDemandCircuit(v bool) {
	if v {
		t.flags21 |= uint8(0x20)
	} else {
		t.flags21 &= ^uint8(0x20)
	}
}
func (t *Option) OriginatorIsRouter() bool {
	return ((t.flags21 & 0x10) >> 4) == 1
}
func (t *Option) SetOriginatorIsRouter(v bool) {
	if v {
		t.flags21 |= uint8(0x10)
	} else {
		t.flags21 &= ^uint8(0x10)
	}
}
func (t *Option) Nssa() bool {
	return ((t.flags21 & 0x08) >> 3) == 1
}
func (t *Option) SetNssa(v bool) {
	if v {
		t.flags21 |= uint8(0x8)
	} else {
		t.flags21 &= ^uint8(0x8)
	}
}
func (t *Option) X() bool {
	return ((t.flags21 & 0x04) >> 2) == 1
}
func (t *Option) SetX(v bool) {
	if v {
		t.flags21 |= uint8(0x4)
	} else {
		t.flags21 &= ^uint8(0x4)
	}
}
func (t *Option) External() bool {
	return ((t.flags21 & 0x02) >> 1) == 1
}
func (t *Option) SetExternal(v bool) {
	if v {
		t.flags21 |= uint8(0x2)
	} else {
		t.flags21 &= ^uint8(0x2)
	}
}
func (t *Option) V6() bool {
	return ((t.flags21 & 0x01) >> 0) == 1
}
func (t *Option) SetV6(v bool) {
	if v {
		t.flags21 |= uint8(0x1)
	} else {
		t.flags21 &= ^uint8(0x1)
	}
}
func (t *Option) Visit(v VisitorTIJJO) {
	v.Visit(v, "Reserved", &t.Reserved)
	v.Visit(v, "Ospfv2Compat", t.Ospfv2Compat())
	v.Visit(v, "DemandCircuit", (func() uint8 {
		if t.DemandCircuit() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "OriginatorIsRouter", (func() uint8 {
		if t.OriginatorIsRouter() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "Nssa", (func() uint8 {
		if t.Nssa() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "X", (func() uint8 {
		if t.X() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "External", (func() uint8 {
		if t.External() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "V6", (func() uint8 {
		if t.V6() {
			return 1
		} else {
			return 0
		}
	}()))
}
func (t *Option) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *Option) Write(w io.Writer) (err error) {
	tmp22 := [2]byte{}
	binary.BigEndian.PutUint16(tmp22[:], uint16(t.Reserved))
	if n, err := w.Write(tmp22[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Reserved: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.flags21)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.flags21: %w", err)
	}
	return nil
}
func (t *Option) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 3))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *Option) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *Option) Read(r io.Reader) (err error) {
	tmpReserved := [2]byte{}
	n_Reserved, err := io.ReadFull(r, tmpReserved[:])
	if err != nil {
		return fmt.Errorf("read Reserved: expect 2 bytes but read %d bytes: %w", n_Reserved, err)
	}
	t.Reserved = uint16(binary.BigEndian.Uint16(tmpReserved[:]))
	tmpflags21 := [1]byte{}
	n_flags21, err := io.ReadFull(r, tmpflags21[:])
	if err != nil {
		return fmt.Errorf("read flags21: expect 1 byte but read %d bytes: %w", n_flags21, err)
	}
	t.flags21 = uint8(tmpflags21[0])
	return nil
}

func (t *Option) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *Option) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode Option: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *RouterInfo) Visit(v VisitorTIJJO) {
	v.Visit(v, "Type", &t.Type)
	v.Visit(v, "Reserved", &t.Reserved)
	v.Visit(v, "Metric", &t.Metric)
	v.Visit(v, "InterfaceId", &t.InterfaceId)
	v.Visit(v, "NeighborInterfaceId", &t.NeighborInterfaceId)
	v.Visit(v, "NeighborRouterId", &t.NeighborRouterId)
}
func (t *RouterInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *RouterInfo) Write(w io.Writer) (err error) {
	if n, err := w.Write([]byte{byte(t.Type)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Type: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Reserved)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Reserved: %w", err)
	}
	tmp23 := [2]byte{}
	binary.BigEndian.PutUint16(tmp23[:], uint16(t.Metric))
	if n, err := w.Write(tmp23[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Metric: %w", err)
	}
	tmp24 := [4]byte{}
	binary.BigEndian.PutUint32(tmp24[:], uint32(t.InterfaceId))
	if n, err := w.Write(tmp24[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.InterfaceId: %w", err)
	}
	tmp25 := [4]byte{}
	binary.BigEndian.PutUint32(tmp25[:], uint32(t.NeighborInterfaceId))
	if n, err := w.Write(tmp25[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.NeighborInterfaceId: %w", err)
	}
	tmp26 := [4]byte{}
	binary.BigEndian.PutUint32(tmp26[:], uint32(t.NeighborRouterId))
	if n, err := w.Write(tmp26[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.NeighborRouterId: %w", err)
	}
	return nil
}
func (t *RouterInfo) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 16))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *RouterInfo) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *RouterInfo) Read(r io.Reader) (err error) {
	tmpType := [1]byte{}
	n_Type, err := io.ReadFull(r, tmpType[:])
	if err != nil {
		return fmt.Errorf("read Type: expect 1 byte but read %d bytes: %w", n_Type, err)
	}
	t.Type = uint8(tmpType[0])
	tmpReserved := [1]byte{}
	n_Reserved, err := io.ReadFull(r, tmpReserved[:])
	if err != nil {
		return fmt.Errorf("read Reserved: expect 1 byte but read %d bytes: %w", n_Reserved, err)
	}
	t.Reserved = uint8(tmpReserved[0])
	tmpMetric := [2]byte{}
	n_Metric, err := io.ReadFull(r, tmpMetric[:])
	if err != nil {
		return fmt.Errorf("read Metric: expect 2 bytes but read %d bytes: %w", n_Metric, err)
	}
	t.Metric = uint16(binary.BigEndian.Uint16(tmpMetric[:]))
	tmpInterfaceId := [4]byte{}
	n_InterfaceId, err := io.ReadFull(r, tmpInterfaceId[:])
	if err != nil {
		return fmt.Errorf("read InterfaceId: expect 4 bytes but read %d bytes: %w", n_InterfaceId, err)
	}
	t.InterfaceId = uint32(binary.BigEndian.Uint32(tmpInterfaceId[:]))
	tmpNeighborInterfaceId := [4]byte{}
	n_NeighborInterfaceId, err := io.ReadFull(r, tmpNeighborInterfaceId[:])
	if err != nil {
		return fmt.Errorf("read NeighborInterfaceId: expect 4 bytes but read %d bytes: %w", n_NeighborInterfaceId, err)
	}
	t.NeighborInterfaceId = uint32(binary.BigEndian.Uint32(tmpNeighborInterfaceId[:]))
	tmpNeighborRouterId := [4]byte{}
	n_NeighborRouterId, err := io.ReadFull(r, tmpNeighborRouterId[:])
	if err != nil {
		return fmt.Errorf("read NeighborRouterId: expect 4 bytes but read %d bytes: %w", n_NeighborRouterId, err)
	}
	t.NeighborRouterId = uint32(binary.BigEndian.Uint32(tmpNeighborRouterId[:]))
	return nil
}

func (t *RouterInfo) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *RouterInfo) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode RouterInfo: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *RouterInformationCapabilities) GracefulRestart() bool {
	return ((t.flags27 & 0x80000000) >> 31) == 1
}
func (t *RouterInformationCapabilities) SetGracefulRestart(v bool) {
	if v {
		t.flags27 |= uint32(0x80000000)
	} else {
		t.flags27 &= ^uint32(0x80000000)
	}
}
func (t *RouterInformationCapabilities) RestartHelper() bool {
	return ((t.flags27 & 0x40000000) >> 30) == 1
}
func (t *RouterInformationCapabilities) SetRestartHelper(v bool) {
	if v {
		t.flags27 |= uint32(0x40000000)
	} else {
		t.flags27 &= ^uint32(0x40000000)
	}
}
func (t *RouterInformationCapabilities) StubRouter() bool {
	return ((t.flags27 & 0x20000000) >> 29) == 1
}
func (t *RouterInformationCapabilities) SetStubRouter(v bool) {
	if v {
		t.flags27 |= uint32(0x20000000)
	} else {
		t.flags27 &= ^uint32(0x20000000)
	}
}
func (t *RouterInformationCapabilities) TrafficEngineering() bool {
	return ((t.flags27 & 0x10000000) >> 28) == 1
}
func (t *RouterInformationCapabilities) SetTrafficEngineering(v bool) {
	if v {
		t.flags27 |= uint32(0x10000000)
	} else {
		t.flags27 &= ^uint32(0x10000000)
	}
}
func (t *RouterInformationCapabilities) P2PoverLan() bool {
	return ((t.flags27 & 0x08000000) >> 27) == 1
}
func (t *RouterInformationCapabilities) SetP2PoverLan(v bool) {
	if v {
		t.flags27 |= uint32(0x8000000)
	} else {
		t.flags27 &= ^uint32(0x8000000)
	}
}
func (t *RouterInformationCapabilities) ExperimentalTe() bool {
	return ((t.flags27 & 0x04000000) >> 26) == 1
}
func (t *RouterInformationCapabilities) SetExperimentalTe(v bool) {
	if v {
		t.flags27 |= uint32(0x4000000)
	} else {
		t.flags27 &= ^uint32(0x4000000)
	}
}
func (t *RouterInformationCapabilities) Reserved() uint32 {
	return ((t.flags27 & 0x03ffffff) >> 0)
}
func (t *RouterInformationCapabilities) SetReserved(v uint32) bool {
	if v > 67108863 {
		return false
	}
	t.flags27 = (t.flags27 & ^uint32(0x3ffffff)) | ((v & 0x3ffffff) << 0)
	return true
}
func (t *RouterInformationCapabilities) Visit(v VisitorTIJJO) {
	v.Visit(v, "GracefulRestart", (func() uint32 {
		if t.GracefulRestart() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "RestartHelper", (func() uint32 {
		if t.RestartHelper() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "StubRouter", (func() uint32 {
		if t.StubRouter() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "TrafficEngineering", (func() uint32 {
		if t.TrafficEngineering() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "P2PoverLan", (func() uint32 {
		if t.P2PoverLan() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "ExperimentalTe", (func() uint32 {
		if t.ExperimentalTe() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "Reserved", t.Reserved())
}
func (t *RouterInformationCapabilities) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *RouterInformationCapabilities) Write(w io.Writer) (err error) {
	tmp28 := [4]byte{}
	binary.BigEndian.PutUint32(tmp28[:], uint32(t.flags27))
	if n, err := w.Write(tmp28[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.flags27: %w", err)
	}
	return nil
}
func (t *RouterInformationCapabilities) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 4))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *RouterInformationCapabilities) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *RouterInformationCapabilities) Read(r io.Reader) (err error) {
	tmpflags27 := [4]byte{}
	n_flags27, err := io.ReadFull(r, tmpflags27[:])
	if err != nil {
		return fmt.Errorf("read flags27: expect 4 bytes but read %d bytes: %w", n_flags27, err)
	}
	t.flags27 = uint32(binary.BigEndian.Uint32(tmpflags27[:]))
	return nil
}

func (t *RouterInformationCapabilities) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *RouterInformationCapabilities) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode RouterInformationCapabilities: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *FunctionalCapabilities) Visit(v VisitorTIJJO) {
	v.Visit(v, "Capabilities", &t.Capabilities)
}
func (t *FunctionalCapabilities) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *FunctionalCapabilities) Write(w io.Writer) (err error) {
	for _, v := range t.Capabilities {
		tmp29 := [4]byte{}
		binary.BigEndian.PutUint32(tmp29[:], uint32(v))
		if n, err := w.Write(tmp29[:]); err != nil || n != 4 {
			return fmt.Errorf("encode v: %w", err)
		}
	}
	return nil
}
func (t *FunctionalCapabilities) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 0))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *FunctionalCapabilities) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *FunctionalCapabilities) Read(r io.Reader) (err error) {
	tmp_byte_scanner30_ := bufio.NewReaderSize(r, 1)
	old_r_Capabilities := r
	r = tmp_byte_scanner30_
	for {
		_, err := tmp_byte_scanner30_.ReadByte()
		if err != nil {
			if err != io.EOF {
				return fmt.Errorf("read Capabilities: %w", err)
			}
			break
		}
		if err := tmp_byte_scanner30_.UnreadByte(); err != nil {
			return fmt.Errorf("read Capabilities: unexpected unread error: %w", err)
		}
		var tmp31_ uint32
		tmpCapabilities := [4]byte{}
		n_Capabilities, err := io.ReadFull(r, tmpCapabilities[:])
		if err != nil {
			return fmt.Errorf("read Capabilities: expect 4 bytes but read %d bytes: %w", n_Capabilities, err)
		}
		tmp31_ = uint32(binary.BigEndian.Uint32(tmpCapabilities[:]))
		t.Capabilities = append(t.Capabilities, tmp31_)
	}
	r = old_r_Capabilities
	return nil
}

func (t *FunctionalCapabilities) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *FunctionalCapabilities) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode FunctionalCapabilities: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *Srv6CapabilitiesSubTlv) SetValue(v []uint8) bool {
	if len(v) > int(^uint16(0)) {
		return false
	}
	t.Length = uint16(len(v))
	t.Value = v
	return true
}
func (t *Srv6CapabilitiesSubTlv) Visit(v VisitorTIJJO) {
	v.Visit(v, "Type", &t.Type)
	v.Visit(v, "Length", &t.Length)
	v.Visit(v, "Value", &t.Value)
}
func (t *Srv6CapabilitiesSubTlv) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *Srv6CapabilitiesSubTlv) Write(w io.Writer) (err error) {
	tmp32 := [2]byte{}
	binary.BigEndian.PutUint16(tmp32[:], uint16(t.Type))
	if n, err := w.Write(tmp32[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Type: %w", err)
	}
	tmp33 := [2]byte{}
	binary.BigEndian.PutUint16(tmp33[:], uint16(t.Length))
	if n, err := w.Write(tmp33[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Length: %w", err)
	}
	len_Value := int(t.Length)
	if len(t.Value) != len_Value {
		return fmt.Errorf("encode Value: expect %d bytes but got %d bytes", len_Value, len(t.Value))
	}
	if n, err := w.Write(t.Value); err != nil || n != len(t.Value) {
		return fmt.Errorf("encode Value: %w", err)
	}
	return nil
}
func (t *Srv6CapabilitiesSubTlv) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 4))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *Srv6CapabilitiesSubTlv) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *Srv6CapabilitiesSubTlv) Read(r io.Reader) (err error) {
	tmpType := [2]byte{}
	n_Type, err := io.ReadFull(r, tmpType[:])
	if err != nil {
		return fmt.Errorf("read Type: expect 2 bytes but read %d bytes: %w", n_Type, err)
	}
	t.Type = uint16(binary.BigEndian.Uint16(tmpType[:]))
	tmpLength := [2]byte{}
	n_Length, err := io.ReadFull(r, tmpLength[:])
	if err != nil {
		return fmt.Errorf("read Length: expect 2 bytes but read %d bytes: %w", n_Length, err)
	}
	t.Length = uint16(binary.BigEndian.Uint16(tmpLength[:]))
	len_Value := int(t.Length)
	if len_Value != 0 {
		tmpValue := make([]byte, len_Value)
		n_Value, err := io.ReadFull(r, tmpValue[:])
		if err != nil {
			return fmt.Errorf("read Value: expect %d bytes but read %d bytes: %w", len_Value, n_Value, err)
		}
		t.Value = tmpValue[:]
	} else {
		t.Value = nil
	}
	return nil
}

func (t *Srv6CapabilitiesSubTlv) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *Srv6CapabilitiesSubTlv) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode Srv6CapabilitiesSubTlv: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *Srv6EndSidsubTlv) SetValue(v []uint8) bool {
	if len(v) > int(^uint16(0)) {
		return false
	}
	t.Length = uint16(len(v))
	t.Value = v
	return true
}
func (t *Srv6EndSidsubTlv) Visit(v VisitorTIJJO) {
	v.Visit(v, "Type", &t.Type)
	v.Visit(v, "Length", &t.Length)
	v.Visit(v, "Value", &t.Value)
}
func (t *Srv6EndSidsubTlv) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *Srv6EndSidsubTlv) Write(w io.Writer) (err error) {
	tmp34 := [2]byte{}
	binary.BigEndian.PutUint16(tmp34[:], uint16(t.Type))
	if n, err := w.Write(tmp34[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Type: %w", err)
	}
	tmp35 := [2]byte{}
	binary.BigEndian.PutUint16(tmp35[:], uint16(t.Length))
	if n, err := w.Write(tmp35[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Length: %w", err)
	}
	len_Value := int(t.Length)
	if len(t.Value) != len_Value {
		return fmt.Errorf("encode Value: expect %d bytes but got %d bytes", len_Value, len(t.Value))
	}
	if n, err := w.Write(t.Value); err != nil || n != len(t.Value) {
		return fmt.Errorf("encode Value: %w", err)
	}
	return nil
}
func (t *Srv6EndSidsubTlv) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 4))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *Srv6EndSidsubTlv) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *Srv6EndSidsubTlv) Read(r io.Reader) (err error) {
	tmpType := [2]byte{}
	n_Type, err := io.ReadFull(r, tmpType[:])
	if err != nil {
		return fmt.Errorf("read Type: expect 2 bytes but read %d bytes: %w", n_Type, err)
	}
	t.Type = uint16(binary.BigEndian.Uint16(tmpType[:]))
	tmpLength := [2]byte{}
	n_Length, err := io.ReadFull(r, tmpLength[:])
	if err != nil {
		return fmt.Errorf("read Length: expect 2 bytes but read %d bytes: %w", n_Length, err)
	}
	t.Length = uint16(binary.BigEndian.Uint16(tmpLength[:]))
	len_Value := int(t.Length)
	if len_Value != 0 {
		tmpValue := make([]byte, len_Value)
		n_Value, err := io.ReadFull(r, tmpValue[:])
		if err != nil {
			return fmt.Errorf("read Value: expect %d bytes but read %d bytes: %w", len_Value, n_Value, err)
		}
		t.Value = tmpValue[:]
	} else {
		t.Value = nil
	}
	return nil
}

func (t *Srv6EndSidsubTlv) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *Srv6EndSidsubTlv) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode Srv6EndSidsubTlv: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *Srv6EndXsidsubTlvsubTlv) SetValue(v []uint8) bool {
	if len(v) > int(^uint16(0)) {
		return false
	}
	t.Length = uint16(len(v))
	t.Value = v
	return true
}
func (t *Srv6EndXsidsubTlvsubTlv) Visit(v VisitorTIJJO) {
	v.Visit(v, "Type", &t.Type)
	v.Visit(v, "Length", &t.Length)
	v.Visit(v, "Value", &t.Value)
}
func (t *Srv6EndXsidsubTlvsubTlv) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *Srv6EndXsidsubTlvsubTlv) Write(w io.Writer) (err error) {
	tmp36 := [2]byte{}
	binary.BigEndian.PutUint16(tmp36[:], uint16(t.Type))
	if n, err := w.Write(tmp36[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Type: %w", err)
	}
	tmp37 := [2]byte{}
	binary.BigEndian.PutUint16(tmp37[:], uint16(t.Length))
	if n, err := w.Write(tmp37[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Length: %w", err)
	}
	len_Value := int(t.Length)
	if len(t.Value) != len_Value {
		return fmt.Errorf("encode Value: expect %d bytes but got %d bytes", len_Value, len(t.Value))
	}
	if n, err := w.Write(t.Value); err != nil || n != len(t.Value) {
		return fmt.Errorf("encode Value: %w", err)
	}
	return nil
}
func (t *Srv6EndXsidsubTlvsubTlv) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 4))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *Srv6EndXsidsubTlvsubTlv) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *Srv6EndXsidsubTlvsubTlv) Read(r io.Reader) (err error) {
	tmpType := [2]byte{}
	n_Type, err := io.ReadFull(r, tmpType[:])
	if err != nil {
		return fmt.Errorf("read Type: expect 2 bytes but read %d bytes: %w", n_Type, err)
	}
	t.Type = uint16(binary.BigEndian.Uint16(tmpType[:]))
	tmpLength := [2]byte{}
	n_Length, err := io.ReadFull(r, tmpLength[:])
	if err != nil {
		return fmt.Errorf("read Length: expect 2 bytes but read %d bytes: %w", n_Length, err)
	}
	t.Length = uint16(binary.BigEndian.Uint16(tmpLength[:]))
	len_Value := int(t.Length)
	if len_Value != 0 {
		tmpValue := make([]byte, len_Value)
		n_Value, err := io.ReadFull(r, tmpValue[:])
		if err != nil {
			return fmt.Errorf("read Value: expect %d bytes but read %d bytes: %w", len_Value, n_Value, err)
		}
		t.Value = tmpValue[:]
	} else {
		t.Value = nil
	}
	return nil
}

func (t *Srv6EndXsidsubTlvsubTlv) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *Srv6EndXsidsubTlvsubTlv) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode Srv6EndXsidsubTlvsubTlv: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *Srv6LanEndXsidsubTlvsubTlv) SetValue(v []uint8) bool {
	if len(v) > int(^uint16(0)) {
		return false
	}
	t.Length = uint16(len(v))
	t.Value = v
	return true
}
func (t *Srv6LanEndXsidsubTlvsubTlv) Visit(v VisitorTIJJO) {
	v.Visit(v, "Type", &t.Type)
	v.Visit(v, "Length", &t.Length)
	v.Visit(v, "Value", &t.Value)
}
func (t *Srv6LanEndXsidsubTlvsubTlv) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *Srv6LanEndXsidsubTlvsubTlv) Write(w io.Writer) (err error) {
	tmp38 := [2]byte{}
	binary.BigEndian.PutUint16(tmp38[:], uint16(t.Type))
	if n, err := w.Write(tmp38[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Type: %w", err)
	}
	tmp39 := [2]byte{}
	binary.BigEndian.PutUint16(tmp39[:], uint16(t.Length))
	if n, err := w.Write(tmp39[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Length: %w", err)
	}
	len_Value := int(t.Length)
	if len(t.Value) != len_Value {
		return fmt.Errorf("encode Value: expect %d bytes but got %d bytes", len_Value, len(t.Value))
	}
	if n, err := w.Write(t.Value); err != nil || n != len(t.Value) {
		return fmt.Errorf("encode Value: %w", err)
	}
	return nil
}
func (t *Srv6LanEndXsidsubTlvsubTlv) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 4))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *Srv6LanEndXsidsubTlvsubTlv) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *Srv6LanEndXsidsubTlvsubTlv) Read(r io.Reader) (err error) {
	tmpType := [2]byte{}
	n_Type, err := io.ReadFull(r, tmpType[:])
	if err != nil {
		return fmt.Errorf("read Type: expect 2 bytes but read %d bytes: %w", n_Type, err)
	}
	t.Type = uint16(binary.BigEndian.Uint16(tmpType[:]))
	tmpLength := [2]byte{}
	n_Length, err := io.ReadFull(r, tmpLength[:])
	if err != nil {
		return fmt.Errorf("read Length: expect 2 bytes but read %d bytes: %w", n_Length, err)
	}
	t.Length = uint16(binary.BigEndian.Uint16(tmpLength[:]))
	len_Value := int(t.Length)
	if len_Value != 0 {
		tmpValue := make([]byte, len_Value)
		n_Value, err := io.ReadFull(r, tmpValue[:])
		if err != nil {
			return fmt.Errorf("read Value: expect %d bytes but read %d bytes: %w", len_Value, n_Value, err)
		}
		t.Value = tmpValue[:]
	} else {
		t.Value = nil
	}
	return nil
}

func (t *Srv6LanEndXsidsubTlvsubTlv) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *Srv6LanEndXsidsubTlvsubTlv) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode Srv6LanEndXsidsubTlvsubTlv: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *Srv6SidstructureSubTlv) Visit(v VisitorTIJJO) {
	v.Visit(v, "LocatorBlockLength", &t.LocatorBlockLength)
	v.Visit(v, "LocatorNodeLength", &t.LocatorNodeLength)
	v.Visit(v, "FunctionLength", &t.FunctionLength)
	v.Visit(v, "ArgumentsLength", &t.ArgumentsLength)
}
func (t *Srv6SidstructureSubTlv) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *Srv6SidstructureSubTlv) Write(w io.Writer) (err error) {
	if n, err := w.Write([]byte{byte(t.LocatorBlockLength)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.LocatorBlockLength: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.LocatorNodeLength)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.LocatorNodeLength: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.FunctionLength)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.FunctionLength: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.ArgumentsLength)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.ArgumentsLength: %w", err)
	}
	return nil
}
func (t *Srv6SidstructureSubTlv) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 4))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *Srv6SidstructureSubTlv) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *Srv6SidstructureSubTlv) Read(r io.Reader) (err error) {
	tmpLocatorBlockLength := [1]byte{}
	n_LocatorBlockLength, err := io.ReadFull(r, tmpLocatorBlockLength[:])
	if err != nil {
		return fmt.Errorf("read LocatorBlockLength: expect 1 byte but read %d bytes: %w", n_LocatorBlockLength, err)
	}
	t.LocatorBlockLength = uint8(tmpLocatorBlockLength[0])
	tmpLocatorNodeLength := [1]byte{}
	n_LocatorNodeLength, err := io.ReadFull(r, tmpLocatorNodeLength[:])
	if err != nil {
		return fmt.Errorf("read LocatorNodeLength: expect 1 byte but read %d bytes: %w", n_LocatorNodeLength, err)
	}
	t.LocatorNodeLength = uint8(tmpLocatorNodeLength[0])
	tmpFunctionLength := [1]byte{}
	n_FunctionLength, err := io.ReadFull(r, tmpFunctionLength[:])
	if err != nil {
		return fmt.Errorf("read FunctionLength: expect 1 byte but read %d bytes: %w", n_FunctionLength, err)
	}
	t.FunctionLength = uint8(tmpFunctionLength[0])
	tmpArgumentsLength := [1]byte{}
	n_ArgumentsLength, err := io.ReadFull(r, tmpArgumentsLength[:])
	if err != nil {
		return fmt.Errorf("read ArgumentsLength: expect 1 byte but read %d bytes: %w", n_ArgumentsLength, err)
	}
	t.ArgumentsLength = uint8(tmpArgumentsLength[0])
	return nil
}

func (t *Srv6SidstructureSubTlv) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *Srv6SidstructureSubTlv) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode Srv6SidstructureSubTlv: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *Ipv6ForwardingAddress) Visit(v VisitorTIJJO) {
	v.Visit(v, "ForwardingAddress", &t.ForwardingAddress)
}
func (t *Ipv6ForwardingAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *Ipv6ForwardingAddress) Write(w io.Writer) (err error) {
	if n, err := w.Write(t.ForwardingAddress[:]); err != nil || n != len(t.ForwardingAddress) {
		return fmt.Errorf("encode ForwardingAddress: %w", err)
	}
	return nil
}
func (t *Ipv6ForwardingAddress) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 16))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *Ipv6ForwardingAddress) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *Ipv6ForwardingAddress) Read(r io.Reader) (err error) {
	n_ForwardingAddress, err := io.ReadFull(r, t.ForwardingAddress[:])
	if err != nil {
		return fmt.Errorf("read ForwardingAddress: expect %d bytes but read %d bytes: %w", 16, n_ForwardingAddress, err)
	}
	return nil
}

func (t *Ipv6ForwardingAddress) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *Ipv6ForwardingAddress) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode Ipv6ForwardingAddress: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *RouteTag) Visit(v VisitorTIJJO) {
	v.Visit(v, "RouteTag", &t.RouteTag)
}
func (t *RouteTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *RouteTag) Write(w io.Writer) (err error) {
	tmp40 := [4]byte{}
	binary.BigEndian.PutUint32(tmp40[:], uint32(t.RouteTag))
	if n, err := w.Write(tmp40[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.RouteTag: %w", err)
	}
	return nil
}
func (t *RouteTag) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 4))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *RouteTag) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *RouteTag) Read(r io.Reader) (err error) {
	tmpRouteTag := [4]byte{}
	n_RouteTag, err := io.ReadFull(r, tmpRouteTag[:])
	if err != nil {
		return fmt.Errorf("read RouteTag: expect 4 bytes but read %d bytes: %w", n_RouteTag, err)
	}
	t.RouteTag = uint32(binary.BigEndian.Uint32(tmpRouteTag[:]))
	return nil
}

func (t *RouteTag) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *RouteTag) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode RouteTag: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *PrefixSourceRouterId) Visit(v VisitorTIJJO) {
	v.Visit(v, "RouterId", &t.RouterId)
}
func (t *PrefixSourceRouterId) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *PrefixSourceRouterId) Write(w io.Writer) (err error) {
	tmp41 := [4]byte{}
	binary.BigEndian.PutUint32(tmp41[:], uint32(t.RouterId))
	if n, err := w.Write(tmp41[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.RouterId: %w", err)
	}
	return nil
}
func (t *PrefixSourceRouterId) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 4))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *PrefixSourceRouterId) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *PrefixSourceRouterId) Read(r io.Reader) (err error) {
	tmpRouterId := [4]byte{}
	n_RouterId, err := io.ReadFull(r, tmpRouterId[:])
	if err != nil {
		return fmt.Errorf("read RouterId: expect 4 bytes but read %d bytes: %w", n_RouterId, err)
	}
	t.RouterId = uint32(binary.BigEndian.Uint32(tmpRouterId[:]))
	return nil
}

func (t *PrefixSourceRouterId) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *PrefixSourceRouterId) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode PrefixSourceRouterId: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *PrefixSourceRouterAddress) Visit(v VisitorTIJJO) {
	v.Visit(v, "RouterAddress", &t.RouterAddress)
}
func (t *PrefixSourceRouterAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *PrefixSourceRouterAddress) Write(w io.Writer) (err error) {
	if n, err := w.Write(t.RouterAddress); err != nil || n != len(t.RouterAddress) {
		return fmt.Errorf("encode RouterAddress: %w", err)
	}
	return nil
}
func (t *PrefixSourceRouterAddress) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 0))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *PrefixSourceRouterAddress) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *PrefixSourceRouterAddress) Read(r io.Reader) (err error) {
	bytes_buf_RouterAddress := &bytes.Buffer{}
	if _, err := io.Copy(bytes_buf_RouterAddress, r); err != nil {
		return err
	}
	t.RouterAddress = bytes_buf_RouterAddress.Bytes()
	return nil
}

func (t *PrefixSourceRouterAddress) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *PrefixSourceRouterAddress) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode PrefixSourceRouterAddress: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *LsaheaderChecksum) Visit(v VisitorTIJJO) {
	v.Visit(v, "LsType", &t.LsType)
	v.Visit(v, "LinkStateId", &t.LinkStateId)
	v.Visit(v, "AdvertisingRouter", &t.AdvertisingRouter)
	v.Visit(v, "LsSequenceNumber", &t.LsSequenceNumber)
	v.Visit(v, "LsChecksum", &t.LsChecksum)
	v.Visit(v, "Length", &t.Length)
}
func (t *LsaheaderChecksum) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *LsaheaderChecksum) Write(w io.Writer) (err error) {
	if err := t.LsType.Write(w); err != nil {
		return fmt.Errorf("encode LsType: %w", err)
	}
	tmp42 := [4]byte{}
	binary.BigEndian.PutUint32(tmp42[:], uint32(t.LinkStateId))
	if n, err := w.Write(tmp42[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.LinkStateId: %w", err)
	}
	tmp43 := [4]byte{}
	binary.BigEndian.PutUint32(tmp43[:], uint32(t.AdvertisingRouter))
	if n, err := w.Write(tmp43[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.AdvertisingRouter: %w", err)
	}
	tmp44 := [4]byte{}
	binary.BigEndian.PutUint32(tmp44[:], uint32(t.LsSequenceNumber))
	if n, err := w.Write(tmp44[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.LsSequenceNumber: %w", err)
	}
	tmp45 := [2]byte{}
	binary.BigEndian.PutUint16(tmp45[:], uint16(t.LsChecksum))
	if n, err := w.Write(tmp45[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.LsChecksum: %w", err)
	}
	tmp46 := [2]byte{}
	binary.BigEndian.PutUint16(tmp46[:], uint16(t.Length))
	if n, err := w.Write(tmp46[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Length: %w", err)
	}
	return nil
}
func (t *LsaheaderChecksum) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 18))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *LsaheaderChecksum) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *LsaheaderChecksum) Read(r io.Reader) (err error) {
	if err := t.LsType.Read(r); err != nil {
		return fmt.Errorf("read LsType: %w", err)
	}
	tmpLinkStateId := [4]byte{}
	n_LinkStateId, err := io.ReadFull(r, tmpLinkStateId[:])
	if err != nil {
		return fmt.Errorf("read LinkStateId: expect 4 bytes but read %d bytes: %w", n_LinkStateId, err)
	}
	t.LinkStateId = uint32(binary.BigEndian.Uint32(tmpLinkStateId[:]))
	tmpAdvertisingRouter := [4]byte{}
	n_AdvertisingRouter, err := io.ReadFull(r, tmpAdvertisingRouter[:])
	if err != nil {
		return fmt.Errorf("read AdvertisingRouter: expect 4 bytes but read %d bytes: %w", n_AdvertisingRouter, err)
	}
	t.AdvertisingRouter = uint32(binary.BigEndian.Uint32(tmpAdvertisingRouter[:]))
	tmpLsSequenceNumber := [4]byte{}
	n_LsSequenceNumber, err := io.ReadFull(r, tmpLsSequenceNumber[:])
	if err != nil {
		return fmt.Errorf("read LsSequenceNumber: expect 4 bytes but read %d bytes: %w", n_LsSequenceNumber, err)
	}
	t.LsSequenceNumber = uint32(binary.BigEndian.Uint32(tmpLsSequenceNumber[:]))
	tmpLsChecksum := [2]byte{}
	n_LsChecksum, err := io.ReadFull(r, tmpLsChecksum[:])
	if err != nil {
		return fmt.Errorf("read LsChecksum: expect 2 bytes but read %d bytes: %w", n_LsChecksum, err)
	}
	t.LsChecksum = uint16(binary.BigEndian.Uint16(tmpLsChecksum[:]))
	tmpLength := [2]byte{}
	n_Length, err := io.ReadFull(r, tmpLength[:])
	if err != nil {
		return fmt.Errorf("read Length: expect 2 bytes but read %d bytes: %w", n_Length, err)
	}
	t.Length = uint16(binary.BigEndian.Uint16(tmpLength[:]))
	return nil
}

func (t *LsaheaderChecksum) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *LsaheaderChecksum) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode LsaheaderChecksum: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *Lsaheader) Visit(v VisitorTIJJO) {
	v.Visit(v, "LsAge", &t.LsAge)
	v.Visit(v, "HeaderChecksum", &t.HeaderChecksum)
}
func (t *Lsaheader) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *Lsaheader) Write(w io.Writer) (err error) {
	tmp47 := [2]byte{}
	binary.BigEndian.PutUint16(tmp47[:], uint16(t.LsAge))
	if n, err := w.Write(tmp47[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.LsAge: %w", err)
	}
	if err := t.HeaderChecksum.Write(w); err != nil {
		return fmt.Errorf("encode HeaderChecksum: %w", err)
	}
	return nil
}
func (t *Lsaheader) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 20))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *Lsaheader) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *Lsaheader) Read(r io.Reader) (err error) {
	tmpLsAge := [2]byte{}
	n_LsAge, err := io.ReadFull(r, tmpLsAge[:])
	if err != nil {
		return fmt.Errorf("read LsAge: expect 2 bytes but read %d bytes: %w", n_LsAge, err)
	}
	t.LsAge = uint16(binary.BigEndian.Uint16(tmpLsAge[:]))
	if err := t.HeaderChecksum.Read(r); err != nil {
		return fmt.Errorf("read HeaderChecksum: %w", err)
	}
	return nil
}

func (t *Lsaheader) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *Lsaheader) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode Lsaheader: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *RouterLsa) Reserved() uint8 {
	return ((t.flags48 & 0xe0) >> 5)
}
func (t *RouterLsa) SetReserved(v uint8) bool {
	if v > 7 {
		return false
	}
	t.flags48 = (t.flags48 & ^uint8(0xe0)) | ((v & 0x7) << 5)
	return true
}
func (t *RouterLsa) Nssa() bool {
	return ((t.flags48 & 0x10) >> 4) == 1
}
func (t *RouterLsa) SetNssa(v bool) {
	if v {
		t.flags48 |= uint8(0x10)
	} else {
		t.flags48 &= ^uint8(0x10)
	}
}
func (t *RouterLsa) X() bool {
	return ((t.flags48 & 0x08) >> 3) == 1
}
func (t *RouterLsa) SetX(v bool) {
	if v {
		t.flags48 |= uint8(0x8)
	} else {
		t.flags48 &= ^uint8(0x8)
	}
}
func (t *RouterLsa) AdjustVirtual() bool {
	return ((t.flags48 & 0x04) >> 2) == 1
}
func (t *RouterLsa) SetAdjustVirtual(v bool) {
	if v {
		t.flags48 |= uint8(0x4)
	} else {
		t.flags48 &= ^uint8(0x4)
	}
}
func (t *RouterLsa) AsBoundary() bool {
	return ((t.flags48 & 0x02) >> 1) == 1
}
func (t *RouterLsa) SetAsBoundary(v bool) {
	if v {
		t.flags48 |= uint8(0x2)
	} else {
		t.flags48 &= ^uint8(0x2)
	}
}
func (t *RouterLsa) AreaBoundary() bool {
	return ((t.flags48 & 0x01) >> 0) == 1
}
func (t *RouterLsa) SetAreaBoundary(v bool) {
	if v {
		t.flags48 |= uint8(0x1)
	} else {
		t.flags48 &= ^uint8(0x1)
	}
}
func (t *RouterLsa) Visit(v VisitorTIJJO) {
	v.Visit(v, "Reserved", t.Reserved())
	v.Visit(v, "Nssa", (func() uint8 {
		if t.Nssa() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "X", (func() uint8 {
		if t.X() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "AdjustVirtual", (func() uint8 {
		if t.AdjustVirtual() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "AsBoundary", (func() uint8 {
		if t.AsBoundary() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "AreaBoundary", (func() uint8 {
		if t.AreaBoundary() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "Options", &t.Options)
	v.Visit(v, "LinkInfo", &t.LinkInfo)
}
func (t *RouterLsa) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *RouterLsa) Write(w io.Writer) (err error) {
	if n, err := w.Write([]byte{byte(t.flags48)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.flags48: %w", err)
	}
	if err := t.Options.Write(w); err != nil {
		return fmt.Errorf("encode Options: %w", err)
	}
	for _, v := range t.LinkInfo {
		if err := v.Write(w); err != nil {
			return fmt.Errorf("encode LinkInfo: %w", err)
		}
	}
	return nil
}
func (t *RouterLsa) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 4))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *RouterLsa) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *RouterLsa) Read(r io.Reader) (err error) {
	tmpflags48 := [1]byte{}
	n_flags48, err := io.ReadFull(r, tmpflags48[:])
	if err != nil {
		return fmt.Errorf("read flags48: expect 1 byte but read %d bytes: %w", n_flags48, err)
	}
	t.flags48 = uint8(tmpflags48[0])
	if err := t.Options.Read(r); err != nil {
		return fmt.Errorf("read Options: %w", err)
	}
	tmp_byte_scanner49_ := bufio.NewReaderSize(r, 1)
	old_r_LinkInfo := r
	r = tmp_byte_scanner49_
	for {
		_, err := tmp_byte_scanner49_.ReadByte()
		if err != nil {
			if err != io.EOF {
				return fmt.Errorf("read LinkInfo: %w", err)
			}
			break
		}
		if err := tmp_byte_scanner49_.UnreadByte(); err != nil {
			return fmt.Errorf("read LinkInfo: unexpected unread error: %w", err)
		}
		var tmp50_ RouterInfo
		if err := tmp50_.Read(r); err != nil {
			return fmt.Errorf("read LinkInfo: %w", err)
		}
		t.LinkInfo = append(t.LinkInfo, tmp50_)
	}
	r = old_r_LinkInfo
	return nil
}

func (t *RouterLsa) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *RouterLsa) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode RouterLsa: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *NetworkLsa) Visit(v VisitorTIJJO) {
	v.Visit(v, "Reserved", &t.Reserved)
	v.Visit(v, "Options", &t.Options)
	v.Visit(v, "AttachedRouters", &t.AttachedRouters)
}
func (t *NetworkLsa) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *NetworkLsa) Write(w io.Writer) (err error) {
	if n, err := w.Write([]byte{byte(t.Reserved)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Reserved: %w", err)
	}
	if err := t.Options.Write(w); err != nil {
		return fmt.Errorf("encode Options: %w", err)
	}
	for _, v := range t.AttachedRouters {
		tmp51 := [4]byte{}
		binary.BigEndian.PutUint32(tmp51[:], uint32(v))
		if n, err := w.Write(tmp51[:]); err != nil || n != 4 {
			return fmt.Errorf("encode v: %w", err)
		}
	}
	return nil
}
func (t *NetworkLsa) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 4))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *NetworkLsa) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *NetworkLsa) Read(r io.Reader) (err error) {
	tmpReserved := [1]byte{}
	n_Reserved, err := io.ReadFull(r, tmpReserved[:])
	if err != nil {
		return fmt.Errorf("read Reserved: expect 1 byte but read %d bytes: %w", n_Reserved, err)
	}
	t.Reserved = uint8(tmpReserved[0])
	if err := t.Options.Read(r); err != nil {
		return fmt.Errorf("read Options: %w", err)
	}
	tmp_byte_scanner52_ := bufio.NewReaderSize(r, 1)
	old_r_AttachedRouters := r
	r = tmp_byte_scanner52_
	for {
		_, err := tmp_byte_scanner52_.ReadByte()
		if err != nil {
			if err != io.EOF {
				return fmt.Errorf("read AttachedRouters: %w", err)
			}
			break
		}
		if err := tmp_byte_scanner52_.UnreadByte(); err != nil {
			return fmt.Errorf("read AttachedRouters: unexpected unread error: %w", err)
		}
		var tmp53_ uint32
		tmpAttachedRouters := [4]byte{}
		n_AttachedRouters, err := io.ReadFull(r, tmpAttachedRouters[:])
		if err != nil {
			return fmt.Errorf("read AttachedRouters: expect 4 bytes but read %d bytes: %w", n_AttachedRouters, err)
		}
		tmp53_ = uint32(binary.BigEndian.Uint32(tmpAttachedRouters[:]))
		t.AttachedRouters = append(t.AttachedRouters, tmp53_)
	}
	r = old_r_AttachedRouters
	return nil
}

func (t *NetworkLsa) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *NetworkLsa) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode NetworkLsa: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *AddressPrefix) SetPrefix(v []uint8) bool {
	if len(v) > int(^uint8(0)) {
		return false
	}
	t.PrefixLen = uint8(len(v))
	t.Prefix = v
	return true
}
func (t *AddressPrefix) Visit(v VisitorTIJJO) {
	v.Visit(v, "PrefixLen", &t.PrefixLen)
	v.Visit(v, "Options", &t.Options)
	v.Visit(v, "Reserved2", &t.Reserved2)
	v.Visit(v, "Prefix", &t.Prefix)
}
func (t *AddressPrefix) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *AddressPrefix) Write(w io.Writer) (err error) {
	if n, err := w.Write([]byte{byte(t.PrefixLen)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.PrefixLen: %w", err)
	}
	if err := t.Options.Write(w); err != nil {
		return fmt.Errorf("encode Options: %w", err)
	}
	tmp54 := [2]byte{}
	binary.BigEndian.PutUint16(tmp54[:], uint16(t.Reserved2))
	if n, err := w.Write(tmp54[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Reserved2: %w", err)
	}
	len_Prefix := int(t.PrefixLen)
	if len(t.Prefix) != len_Prefix {
		return fmt.Errorf("encode Prefix: expect %d bytes but got %d bytes", len_Prefix, len(t.Prefix))
	}
	if n, err := w.Write(t.Prefix); err != nil || n != len(t.Prefix) {
		return fmt.Errorf("encode Prefix: %w", err)
	}
	return nil
}
func (t *AddressPrefix) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 4))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *AddressPrefix) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *AddressPrefix) Read(r io.Reader) (err error) {
	tmpPrefixLen := [1]byte{}
	n_PrefixLen, err := io.ReadFull(r, tmpPrefixLen[:])
	if err != nil {
		return fmt.Errorf("read PrefixLen: expect 1 byte but read %d bytes: %w", n_PrefixLen, err)
	}
	t.PrefixLen = uint8(tmpPrefixLen[0])
	if err := t.Options.Read(r); err != nil {
		return fmt.Errorf("read Options: %w", err)
	}
	tmpReserved2 := [2]byte{}
	n_Reserved2, err := io.ReadFull(r, tmpReserved2[:])
	if err != nil {
		return fmt.Errorf("read Reserved2: expect 2 bytes but read %d bytes: %w", n_Reserved2, err)
	}
	t.Reserved2 = uint16(binary.BigEndian.Uint16(tmpReserved2[:]))
	len_Prefix := int(t.PrefixLen)
	if len_Prefix != 0 {
		tmpPrefix := make([]byte, len_Prefix)
		n_Prefix, err := io.ReadFull(r, tmpPrefix[:])
		if err != nil {
			return fmt.Errorf("read Prefix: expect %d bytes but read %d bytes: %w", len_Prefix, n_Prefix, err)
		}
		t.Prefix = tmpPrefix[:]
	} else {
		t.Prefix = nil
	}
	return nil
}

func (t *AddressPrefix) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *AddressPrefix) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode AddressPrefix: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *InterAreaPrefixLsa) Visit(v VisitorTIJJO) {
	v.Visit(v, "Reserved", &t.Reserved)
	v.Visit(v, "Metric", &t.Metric)
	v.Visit(v, "Prefix", &t.Prefix)
}
func (t *InterAreaPrefixLsa) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *InterAreaPrefixLsa) Write(w io.Writer) (err error) {
	if n, err := w.Write([]byte{byte(t.Reserved)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Reserved: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Metric >> 16), byte(t.Metric >> 8), byte(t.Metric)}); err != nil || n != 3 {
		return fmt.Errorf("encode t.Metric: %w", err)
	}
	if err := t.Prefix.Write(w); err != nil {
		return fmt.Errorf("encode Prefix: %w", err)
	}
	return nil
}
func (t *InterAreaPrefixLsa) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 4))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *InterAreaPrefixLsa) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *InterAreaPrefixLsa) Read(r io.Reader) (err error) {
	tmpReserved := [1]byte{}
	n_Reserved, err := io.ReadFull(r, tmpReserved[:])
	if err != nil {
		return fmt.Errorf("read Reserved: expect 1 byte but read %d bytes: %w", n_Reserved, err)
	}
	t.Reserved = uint8(tmpReserved[0])
	tmpMetric := [3]byte{}
	n_Metric, err := io.ReadFull(r, tmpMetric[:])
	if err != nil {
		return fmt.Errorf("read Metric: expect 3 bytes but read %d bytes: %w", n_Metric, err)
	}
	t.Metric = uint32(uint32(tmpMetric[0])<<16 | uint32(tmpMetric[1])<<8 | uint32(tmpMetric[2]))
	if err := t.Prefix.Read(r); err != nil {
		return fmt.Errorf("read Prefix: %w", err)
	}
	return nil
}

func (t *InterAreaPrefixLsa) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *InterAreaPrefixLsa) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode InterAreaPrefixLsa: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *InterAreaRouterLsa) Visit(v VisitorTIJJO) {
	v.Visit(v, "Reserved", &t.Reserved)
	v.Visit(v, "Option", &t.Option)
	v.Visit(v, "Reserved2", &t.Reserved2)
	v.Visit(v, "Metric", &t.Metric)
	v.Visit(v, "DestRouterId", &t.DestRouterId)
}
func (t *InterAreaRouterLsa) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *InterAreaRouterLsa) Write(w io.Writer) (err error) {
	if n, err := w.Write([]byte{byte(t.Reserved)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Reserved: %w", err)
	}
	if err := t.Option.Write(w); err != nil {
		return fmt.Errorf("encode Option: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Reserved2)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Reserved2: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Metric >> 16), byte(t.Metric >> 8), byte(t.Metric)}); err != nil || n != 3 {
		return fmt.Errorf("encode t.Metric: %w", err)
	}
	tmp55 := [4]byte{}
	binary.BigEndian.PutUint32(tmp55[:], uint32(t.DestRouterId))
	if n, err := w.Write(tmp55[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.DestRouterId: %w", err)
	}
	return nil
}
func (t *InterAreaRouterLsa) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 12))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *InterAreaRouterLsa) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *InterAreaRouterLsa) Read(r io.Reader) (err error) {
	tmpReserved := [1]byte{}
	n_Reserved, err := io.ReadFull(r, tmpReserved[:])
	if err != nil {
		return fmt.Errorf("read Reserved: expect 1 byte but read %d bytes: %w", n_Reserved, err)
	}
	t.Reserved = uint8(tmpReserved[0])
	if err := t.Option.Read(r); err != nil {
		return fmt.Errorf("read Option: %w", err)
	}
	tmpReserved2 := [1]byte{}
	n_Reserved2, err := io.ReadFull(r, tmpReserved2[:])
	if err != nil {
		return fmt.Errorf("read Reserved2: expect 1 byte but read %d bytes: %w", n_Reserved2, err)
	}
	t.Reserved2 = uint8(tmpReserved2[0])
	tmpMetric := [3]byte{}
	n_Metric, err := io.ReadFull(r, tmpMetric[:])
	if err != nil {
		return fmt.Errorf("read Metric: expect 3 bytes but read %d bytes: %w", n_Metric, err)
	}
	t.Metric = uint32(uint32(tmpMetric[0])<<16 | uint32(tmpMetric[1])<<8 | uint32(tmpMetric[2]))
	tmpDestRouterId := [4]byte{}
	n_DestRouterId, err := io.ReadFull(r, tmpDestRouterId[:])
	if err != nil {
		return fmt.Errorf("read DestRouterId: expect 4 bytes but read %d bytes: %w", n_DestRouterId, err)
	}
	t.DestRouterId = uint32(binary.BigEndian.Uint32(tmpDestRouterId[:]))
	return nil
}

func (t *InterAreaRouterLsa) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *InterAreaRouterLsa) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode InterAreaRouterLsa: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *AsexternalLsa) Reserved() uint8 {
	return ((t.flags56 & 0xf8) >> 3)
}
func (t *AsexternalLsa) SetReserved(v uint8) bool {
	if v > 31 {
		return false
	}
	t.flags56 = (t.flags56 & ^uint8(0xf8)) | ((v & 0x1f) << 3)
	return true
}
func (t *AsexternalLsa) External() bool {
	return ((t.flags56 & 0x04) >> 2) == 1
}
func (t *AsexternalLsa) SetExternal(v bool) {
	if v {
		t.flags56 |= uint8(0x4)
	} else {
		t.flags56 &= ^uint8(0x4)
	}
}
func (t *AsexternalLsa) HasForwardingAddress() bool {
	return ((t.flags56 & 0x02) >> 1) == 1
}
func (t *AsexternalLsa) SetHasForwardingAddress(v bool) {
	if v {
		t.flags56 |= uint8(0x2)
	} else {
		t.flags56 &= ^uint8(0x2)
	}
}
func (t *AsexternalLsa) HasExternalRouteTag() bool {
	return ((t.flags56 & 0x01) >> 0) == 1
}
func (t *AsexternalLsa) SetHasExternalRouteTag(v bool) {
	if v {
		t.flags56 |= uint8(0x1)
	} else {
		t.flags56 &= ^uint8(0x1)
	}
}
func (t *union_59_t) isunion57_() {}
func (t *AsexternalLsa) ForwardingAddress() *[16]uint8 {
	if true == ((func() uint8 {
		if t.HasForwardingAddress() {
			return 1
		} else {
			return 0
		}
	}()) == 1) {
		if _, ok := t.union57_.(*union_59_t); !ok {
			return nil // not set
		}
		tmp := [16]uint8(t.union57_.(*union_59_t).ForwardingAddress[:])
		return &tmp
	}
	return nil
}
func (t *AsexternalLsa) SetForwardingAddress(v [16]uint8) bool {
	if true == ((func() uint8 {
		if t.HasForwardingAddress() {
			return 1
		} else {
			return 0
		}
	}()) == 1) {
		if _, ok := t.union57_.(*union_59_t); !ok {
			t.union57_ = &union_59_t{}
		}
		t.union57_.(*union_59_t).ForwardingAddress = [16]uint8(v)
		return true
	}
	return false
}
func (t *union_62_t) isunion60_() {}
func (t *AsexternalLsa) ExternalRouteTag() *uint32 {
	if true == ((func() uint8 {
		if t.HasExternalRouteTag() {
			return 1
		} else {
			return 0
		}
	}()) == 1) {
		if _, ok := t.union60_.(*union_62_t); !ok {
			return nil // not set
		}
		tmp := uint32(t.union60_.(*union_62_t).ExternalRouteTag)
		return &tmp
	}
	return nil
}
func (t *AsexternalLsa) SetExternalRouteTag(v uint32) bool {
	if true == ((func() uint8 {
		if t.HasExternalRouteTag() {
			return 1
		} else {
			return 0
		}
	}()) == 1) {
		if _, ok := t.union60_.(*union_62_t); !ok {
			t.union60_ = &union_62_t{}
		}
		t.union60_.(*union_62_t).ExternalRouteTag = uint32(v)
		return true
	}
	return false
}
func (t *union_65_t) isunion63_() {}
func (t *AsexternalLsa) ReferencedLinkStateId() *uint32 {
	if true == (t.ReferencedLsType != 0) {
		if _, ok := t.union63_.(*union_65_t); !ok {
			return nil // not set
		}
		tmp := uint32(t.union63_.(*union_65_t).ReferencedLinkStateId)
		return &tmp
	}
	return nil
}
func (t *AsexternalLsa) SetReferencedLinkStateId(v uint32) bool {
	if true == (t.ReferencedLsType != 0) {
		if _, ok := t.union63_.(*union_65_t); !ok {
			t.union63_ = &union_65_t{}
		}
		t.union63_.(*union_65_t).ReferencedLinkStateId = uint32(v)
		return true
	}
	return false
}
func (t *AsexternalLsa) Visit(v VisitorTIJJO) {
	v.Visit(v, "Reserved", t.Reserved())
	v.Visit(v, "External", (func() uint8 {
		if t.External() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "HasForwardingAddress", (func() uint8 {
		if t.HasForwardingAddress() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "HasExternalRouteTag", (func() uint8 {
		if t.HasExternalRouteTag() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "Metric", &t.Metric)
	v.Visit(v, "PrefixLen", &t.PrefixLen)
	v.Visit(v, "PrefixOptions", &t.PrefixOptions)
	v.Visit(v, "ReferencedLsType", &t.ReferencedLsType)
	v.Visit(v, "ForwardingAddress", (t.ForwardingAddress()))
	v.Visit(v, "ExternalRouteTag", (t.ExternalRouteTag()))
	v.Visit(v, "ReferencedLinkStateId", (t.ReferencedLinkStateId()))
}
func (t *AsexternalLsa) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *AsexternalLsa) Write(w io.Writer) (err error) {
	if n, err := w.Write([]byte{byte(t.flags56)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.flags56: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Metric >> 16), byte(t.Metric >> 8), byte(t.Metric)}); err != nil || n != 3 {
		return fmt.Errorf("encode t.Metric: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.PrefixLen)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.PrefixLen: %w", err)
	}
	if err := t.PrefixOptions.Write(w); err != nil {
		return fmt.Errorf("encode PrefixOptions: %w", err)
	}
	tmp66 := [2]byte{}
	binary.BigEndian.PutUint16(tmp66[:], uint16(t.ReferencedLsType))
	if n, err := w.Write(tmp66[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.ReferencedLsType: %w", err)
	}
	if (func() uint8 {
		if t.HasForwardingAddress() {
			return 1
		} else {
			return 0
		}
	}()) == 1 {
		if _, ok := t.union57_.(*union_59_t); !ok {
			return fmt.Errorf("encode t.union57_: union is not set to union_59_t")
		}
		if n, err := w.Write(t.union57_.(*union_59_t).ForwardingAddress[:]); err != nil || n != len(t.union57_.(*union_59_t).ForwardingAddress) {
			return fmt.Errorf("encode ForwardingAddress: %w", err)
		}
	}
	if (func() uint8 {
		if t.HasExternalRouteTag() {
			return 1
		} else {
			return 0
		}
	}()) == 1 {
		if _, ok := t.union60_.(*union_62_t); !ok {
			return fmt.Errorf("encode t.union60_: union is not set to union_62_t")
		}
		tmp67 := [4]byte{}
		binary.BigEndian.PutUint32(tmp67[:], uint32(t.union60_.(*union_62_t).ExternalRouteTag))
		if n, err := w.Write(tmp67[:]); err != nil || n != 4 {
			return fmt.Errorf("encode t.union60_.(*union_62_t).ExternalRouteTag: %w", err)
		}
	}
	if t.ReferencedLsType != 0 {
		if _, ok := t.union63_.(*union_65_t); !ok {
			return fmt.Errorf("encode t.union63_: union is not set to union_65_t")
		}
		tmp68 := [4]byte{}
		binary.BigEndian.PutUint32(tmp68[:], uint32(t.union63_.(*union_65_t).ReferencedLinkStateId))
		if n, err := w.Write(tmp68[:]); err != nil || n != 4 {
			return fmt.Errorf("encode t.union63_.(*union_65_t).ReferencedLinkStateId: %w", err)
		}
	}
	return nil
}
func (t *AsexternalLsa) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 8))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *AsexternalLsa) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *AsexternalLsa) Read(r io.Reader) (err error) {
	tmpflags56 := [1]byte{}
	n_flags56, err := io.ReadFull(r, tmpflags56[:])
	if err != nil {
		return fmt.Errorf("read flags56: expect 1 byte but read %d bytes: %w", n_flags56, err)
	}
	t.flags56 = uint8(tmpflags56[0])
	tmpMetric := [3]byte{}
	n_Metric, err := io.ReadFull(r, tmpMetric[:])
	if err != nil {
		return fmt.Errorf("read Metric: expect 3 bytes but read %d bytes: %w", n_Metric, err)
	}
	t.Metric = uint32(uint32(tmpMetric[0])<<16 | uint32(tmpMetric[1])<<8 | uint32(tmpMetric[2]))
	tmpPrefixLen := [1]byte{}
	n_PrefixLen, err := io.ReadFull(r, tmpPrefixLen[:])
	if err != nil {
		return fmt.Errorf("read PrefixLen: expect 1 byte but read %d bytes: %w", n_PrefixLen, err)
	}
	t.PrefixLen = uint8(tmpPrefixLen[0])
	if err := t.PrefixOptions.Read(r); err != nil {
		return fmt.Errorf("read PrefixOptions: %w", err)
	}
	tmpReferencedLsType := [2]byte{}
	n_ReferencedLsType, err := io.ReadFull(r, tmpReferencedLsType[:])
	if err != nil {
		return fmt.Errorf("read ReferencedLsType: expect 2 bytes but read %d bytes: %w", n_ReferencedLsType, err)
	}
	t.ReferencedLsType = uint16(binary.BigEndian.Uint16(tmpReferencedLsType[:]))
	if (func() uint8 {
		if t.HasForwardingAddress() {
			return 1
		} else {
			return 0
		}
	}()) == 1 {
		t.union57_ = &union_59_t{}
		n_ForwardingAddress, err := io.ReadFull(r, t.union57_.(*union_59_t).ForwardingAddress[:])
		if err != nil {
			return fmt.Errorf("read ForwardingAddress: expect %d bytes but read %d bytes: %w", 16, n_ForwardingAddress, err)
		}
	}
	if (func() uint8 {
		if t.HasExternalRouteTag() {
			return 1
		} else {
			return 0
		}
	}()) == 1 {
		t.union60_ = &union_62_t{}
		tmpExternalRouteTag := [4]byte{}
		n_ExternalRouteTag, err := io.ReadFull(r, tmpExternalRouteTag[:])
		if err != nil {
			return fmt.Errorf("read ExternalRouteTag: expect 4 bytes but read %d bytes: %w", n_ExternalRouteTag, err)
		}
		t.union60_.(*union_62_t).ExternalRouteTag = uint32(binary.BigEndian.Uint32(tmpExternalRouteTag[:]))
	}
	if t.ReferencedLsType != 0 {
		t.union63_ = &union_65_t{}
		tmpReferencedLinkStateId := [4]byte{}
		n_ReferencedLinkStateId, err := io.ReadFull(r, tmpReferencedLinkStateId[:])
		if err != nil {
			return fmt.Errorf("read ReferencedLinkStateId: expect 4 bytes but read %d bytes: %w", n_ReferencedLinkStateId, err)
		}
		t.union63_.(*union_65_t).ReferencedLinkStateId = uint32(binary.BigEndian.Uint32(tmpReferencedLinkStateId[:]))
	}
	return nil
}

func (t *AsexternalLsa) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *AsexternalLsa) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode AsexternalLsa: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *LinkLsa) SetPrefixes(v []AddressPrefix) bool {
	if len(v) > int(^uint16(0)) {
		return false
	}
	t.NumPrefixes = uint16(len(v))
	t.Prefixes = v
	return true
}
func (t *LinkLsa) Visit(v VisitorTIJJO) {
	v.Visit(v, "RtrPriority", &t.RtrPriority)
	v.Visit(v, "Options", &t.Options)
	v.Visit(v, "LinkLocalInterfaceAddress", &t.LinkLocalInterfaceAddress)
	v.Visit(v, "NumPrefixes", &t.NumPrefixes)
	v.Visit(v, "Prefixes", &t.Prefixes)
}
func (t *LinkLsa) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *LinkLsa) Write(w io.Writer) (err error) {
	if n, err := w.Write([]byte{byte(t.RtrPriority)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.RtrPriority: %w", err)
	}
	if err := t.Options.Write(w); err != nil {
		return fmt.Errorf("encode Options: %w", err)
	}
	if n, err := w.Write(t.LinkLocalInterfaceAddress[:]); err != nil || n != len(t.LinkLocalInterfaceAddress) {
		return fmt.Errorf("encode LinkLocalInterfaceAddress: %w", err)
	}
	tmp69 := [2]byte{}
	binary.BigEndian.PutUint16(tmp69[:], uint16(t.NumPrefixes))
	if n, err := w.Write(tmp69[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.NumPrefixes: %w", err)
	}
	len_Prefixes := int(t.NumPrefixes)
	if len(t.Prefixes) != len_Prefixes {
		return fmt.Errorf("encode Prefixes: expect %d but got %d for length", len_Prefixes, len(t.Prefixes))
	}
	for _, v := range t.Prefixes {
		if err := v.Write(w); err != nil {
			return fmt.Errorf("encode Prefixes: %w", err)
		}
	}
	return nil
}
func (t *LinkLsa) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 22))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *LinkLsa) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *LinkLsa) Read(r io.Reader) (err error) {
	tmpRtrPriority := [1]byte{}
	n_RtrPriority, err := io.ReadFull(r, tmpRtrPriority[:])
	if err != nil {
		return fmt.Errorf("read RtrPriority: expect 1 byte but read %d bytes: %w", n_RtrPriority, err)
	}
	t.RtrPriority = uint8(tmpRtrPriority[0])
	if err := t.Options.Read(r); err != nil {
		return fmt.Errorf("read Options: %w", err)
	}
	n_LinkLocalInterfaceAddress, err := io.ReadFull(r, t.LinkLocalInterfaceAddress[:])
	if err != nil {
		return fmt.Errorf("read LinkLocalInterfaceAddress: expect %d bytes but read %d bytes: %w", 16, n_LinkLocalInterfaceAddress, err)
	}
	tmpNumPrefixes := [2]byte{}
	n_NumPrefixes, err := io.ReadFull(r, tmpNumPrefixes[:])
	if err != nil {
		return fmt.Errorf("read NumPrefixes: expect 2 bytes but read %d bytes: %w", n_NumPrefixes, err)
	}
	t.NumPrefixes = uint16(binary.BigEndian.Uint16(tmpNumPrefixes[:]))
	len_Prefixes := int(t.NumPrefixes)
	for i_70 := 0; i_70 < len_Prefixes; i_70++ {
		var tmp71_ AddressPrefix
		if err := tmp71_.Read(r); err != nil {
			return fmt.Errorf("read Prefixes: %w", err)
		}
		t.Prefixes = append(t.Prefixes, tmp71_)
	}
	return nil
}

func (t *LinkLsa) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *LinkLsa) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode LinkLsa: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *IntraAreaPrefixLsa) SetPrefixes(v []AddressPrefix) bool {
	if len(v) > int(^uint16(0)) {
		return false
	}
	t.NumPrefixes = uint16(len(v))
	t.Prefixes = v
	return true
}
func (t *IntraAreaPrefixLsa) Visit(v VisitorTIJJO) {
	v.Visit(v, "NumPrefixes", &t.NumPrefixes)
	v.Visit(v, "ReferencedLsType", &t.ReferencedLsType)
	v.Visit(v, "ReferencedLinkStateId", &t.ReferencedLinkStateId)
	v.Visit(v, "Prefixes", &t.Prefixes)
}
func (t *IntraAreaPrefixLsa) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *IntraAreaPrefixLsa) Write(w io.Writer) (err error) {
	tmp72 := [2]byte{}
	binary.BigEndian.PutUint16(tmp72[:], uint16(t.NumPrefixes))
	if n, err := w.Write(tmp72[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.NumPrefixes: %w", err)
	}
	tmp73 := [2]byte{}
	binary.BigEndian.PutUint16(tmp73[:], uint16(t.ReferencedLsType))
	if n, err := w.Write(tmp73[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.ReferencedLsType: %w", err)
	}
	tmp74 := [4]byte{}
	binary.BigEndian.PutUint32(tmp74[:], uint32(t.ReferencedLinkStateId))
	if n, err := w.Write(tmp74[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.ReferencedLinkStateId: %w", err)
	}
	len_Prefixes := int(t.NumPrefixes)
	if len(t.Prefixes) != len_Prefixes {
		return fmt.Errorf("encode Prefixes: expect %d but got %d for length", len_Prefixes, len(t.Prefixes))
	}
	for _, v := range t.Prefixes {
		if err := v.Write(w); err != nil {
			return fmt.Errorf("encode Prefixes: %w", err)
		}
	}
	return nil
}
func (t *IntraAreaPrefixLsa) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 8))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *IntraAreaPrefixLsa) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *IntraAreaPrefixLsa) Read(r io.Reader) (err error) {
	tmpNumPrefixes := [2]byte{}
	n_NumPrefixes, err := io.ReadFull(r, tmpNumPrefixes[:])
	if err != nil {
		return fmt.Errorf("read NumPrefixes: expect 2 bytes but read %d bytes: %w", n_NumPrefixes, err)
	}
	t.NumPrefixes = uint16(binary.BigEndian.Uint16(tmpNumPrefixes[:]))
	tmpReferencedLsType := [2]byte{}
	n_ReferencedLsType, err := io.ReadFull(r, tmpReferencedLsType[:])
	if err != nil {
		return fmt.Errorf("read ReferencedLsType: expect 2 bytes but read %d bytes: %w", n_ReferencedLsType, err)
	}
	t.ReferencedLsType = uint16(binary.BigEndian.Uint16(tmpReferencedLsType[:]))
	tmpReferencedLinkStateId := [4]byte{}
	n_ReferencedLinkStateId, err := io.ReadFull(r, tmpReferencedLinkStateId[:])
	if err != nil {
		return fmt.Errorf("read ReferencedLinkStateId: expect 4 bytes but read %d bytes: %w", n_ReferencedLinkStateId, err)
	}
	t.ReferencedLinkStateId = uint32(binary.BigEndian.Uint32(tmpReferencedLinkStateId[:]))
	len_Prefixes := int(t.NumPrefixes)
	for i_75 := 0; i_75 < len_Prefixes; i_75++ {
		var tmp76_ AddressPrefix
		if err := tmp76_.Read(r); err != nil {
			return fmt.Errorf("read Prefixes: %w", err)
		}
		t.Prefixes = append(t.Prefixes, tmp76_)
	}
	return nil
}

func (t *IntraAreaPrefixLsa) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *IntraAreaPrefixLsa) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode IntraAreaPrefixLsa: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *Srv6Capabilities) Reserved2() bool {
	return ((t.flags77 & 0x80) >> 7) == 1
}
func (t *Srv6Capabilities) SetReserved2(v bool) {
	if v {
		t.flags77 |= uint8(0x80)
	} else {
		t.flags77 &= ^uint8(0x80)
	}
}
func (t *Srv6Capabilities) Oam() bool {
	return ((t.flags77 & 0x40) >> 6) == 1
}
func (t *Srv6Capabilities) SetOam(v bool) {
	if v {
		t.flags77 |= uint8(0x40)
	} else {
		t.flags77 &= ^uint8(0x40)
	}
}
func (t *Srv6Capabilities) Reserved3() uint8 {
	return ((t.flags77 & 0x3f) >> 0)
}
func (t *Srv6Capabilities) SetReserved3(v uint8) bool {
	if v > 63 {
		return false
	}
	t.flags77 = (t.flags77 & ^uint8(0x3f)) | ((v & 0x3f) << 0)
	return true
}
func (t *Srv6Capabilities) Visit(v VisitorTIJJO) {
	v.Visit(v, "Reserved1", &t.Reserved1)
	v.Visit(v, "Reserved2", (func() uint8 {
		if t.Reserved2() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "Oam", (func() uint8 {
		if t.Oam() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "Reserved3", t.Reserved3())
	v.Visit(v, "Reserved4", &t.Reserved4)
	v.Visit(v, "Tlvs", &t.Tlvs)
}
func (t *Srv6Capabilities) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *Srv6Capabilities) Write(w io.Writer) (err error) {
	if n, err := w.Write([]byte{byte(t.Reserved1)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Reserved1: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.flags77)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.flags77: %w", err)
	}
	tmp78 := [2]byte{}
	binary.BigEndian.PutUint16(tmp78[:], uint16(t.Reserved4))
	if n, err := w.Write(tmp78[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Reserved4: %w", err)
	}
	for _, v := range t.Tlvs {
		if err := v.Write(w); err != nil {
			return fmt.Errorf("encode Tlvs: %w", err)
		}
	}
	return nil
}
func (t *Srv6Capabilities) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 4))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *Srv6Capabilities) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *Srv6Capabilities) Read(r io.Reader) (err error) {
	tmpReserved1 := [1]byte{}
	n_Reserved1, err := io.ReadFull(r, tmpReserved1[:])
	if err != nil {
		return fmt.Errorf("read Reserved1: expect 1 byte but read %d bytes: %w", n_Reserved1, err)
	}
	t.Reserved1 = uint8(tmpReserved1[0])
	tmpflags77 := [1]byte{}
	n_flags77, err := io.ReadFull(r, tmpflags77[:])
	if err != nil {
		return fmt.Errorf("read flags77: expect 1 byte but read %d bytes: %w", n_flags77, err)
	}
	t.flags77 = uint8(tmpflags77[0])
	tmpReserved4 := [2]byte{}
	n_Reserved4, err := io.ReadFull(r, tmpReserved4[:])
	if err != nil {
		return fmt.Errorf("read Reserved4: expect 2 bytes but read %d bytes: %w", n_Reserved4, err)
	}
	t.Reserved4 = uint16(binary.BigEndian.Uint16(tmpReserved4[:]))
	tmp_byte_scanner79_ := bufio.NewReaderSize(r, 1)
	old_r_Tlvs := r
	r = tmp_byte_scanner79_
	for {
		_, err := tmp_byte_scanner79_.ReadByte()
		if err != nil {
			if err != io.EOF {
				return fmt.Errorf("read Tlvs: %w", err)
			}
			break
		}
		if err := tmp_byte_scanner79_.UnreadByte(); err != nil {
			return fmt.Errorf("read Tlvs: unexpected unread error: %w", err)
		}
		var tmp80_ Srv6CapabilitiesSubTlv
		if err := tmp80_.Read(r); err != nil {
			return fmt.Errorf("read Tlvs: %w", err)
		}
		t.Tlvs = append(t.Tlvs, tmp80_)
	}
	r = old_r_Tlvs
	return nil
}

func (t *Srv6Capabilities) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *Srv6Capabilities) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode Srv6Capabilities: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *union_83_t) isunion81_() {}
func (t *union_84_t) isunion81_() {}
func (t *union_85_t) isunion81_() {}
func (t *union_86_t) isunion81_() {}
func (t *RouterInfoOpaqueLsatlv) Capabilities() *RouterInformationCapabilities {
	if t.Type == RouterInfoTlvtype_Capabilities {
		if _, ok := t.union81_.(*union_83_t); !ok {
			return nil // not set
		}
		tmp := RouterInformationCapabilities(t.union81_.(*union_83_t).Capabilities)
		return &tmp
	}
	return nil
}
func (t *RouterInfoOpaqueLsatlv) SetCapabilities(v RouterInformationCapabilities) bool {
	if t.Type == RouterInfoTlvtype_Capabilities {
		if _, ok := t.union81_.(*union_83_t); !ok {
			t.union81_ = &union_83_t{}
		}
		t.union81_.(*union_83_t).Capabilities = RouterInformationCapabilities(v)
		return true
	}
	return false
}
func (t *RouterInfoOpaqueLsatlv) FunctionalCapabilities() *FunctionalCapabilities {
	if t.Type == RouterInfoTlvtype_Capabilities {
		return nil
	} else if t.Type == RouterInfoTlvtype_FunctionalCapabilities {
		if _, ok := t.union81_.(*union_84_t); !ok {
			return nil // not set
		}
		tmp := FunctionalCapabilities(t.union81_.(*union_84_t).FunctionalCapabilities)
		return &tmp
	}
	return nil
}
func (t *RouterInfoOpaqueLsatlv) SetFunctionalCapabilities(v FunctionalCapabilities) bool {
	if t.Type == RouterInfoTlvtype_Capabilities {
		return false
	} else if t.Type == RouterInfoTlvtype_FunctionalCapabilities {
		if _, ok := t.union81_.(*union_84_t); !ok {
			t.union81_ = &union_84_t{}
		}
		t.union81_.(*union_84_t).FunctionalCapabilities = FunctionalCapabilities(v)
		return true
	}
	return false
}
func (t *RouterInfoOpaqueLsatlv) Srv6Capabilities() *Srv6Capabilities {
	if t.Type == RouterInfoTlvtype_Capabilities {
		return nil
	} else if t.Type == RouterInfoTlvtype_FunctionalCapabilities {
		return nil
	} else if t.Type == RouterInfoTlvtype_Srv6Capabilities {
		if _, ok := t.union81_.(*union_85_t); !ok {
			return nil // not set
		}
		tmp := Srv6Capabilities(t.union81_.(*union_85_t).Srv6Capabilities)
		return &tmp
	}
	return nil
}
func (t *RouterInfoOpaqueLsatlv) SetSrv6Capabilities(v Srv6Capabilities) bool {
	if t.Type == RouterInfoTlvtype_Capabilities {
		return false
	} else if t.Type == RouterInfoTlvtype_FunctionalCapabilities {
		return false
	} else if t.Type == RouterInfoTlvtype_Srv6Capabilities {
		if _, ok := t.union81_.(*union_85_t); !ok {
			t.union81_ = &union_85_t{}
		}
		t.union81_.(*union_85_t).Srv6Capabilities = Srv6Capabilities(v)
		return true
	}
	return false
}
func (t *RouterInfoOpaqueLsatlv) Value() *[]uint8 {
	if t.Type == RouterInfoTlvtype_Capabilities {
		return nil
	} else if t.Type == RouterInfoTlvtype_FunctionalCapabilities {
		return nil
	} else if t.Type == RouterInfoTlvtype_Srv6Capabilities {
		return nil
	} else if true {
		if _, ok := t.union81_.(*union_86_t); !ok {
			return nil // not set
		}
		tmp := []uint8(t.union81_.(*union_86_t).Value)
		return &tmp
	}
	return nil
}
func (t *RouterInfoOpaqueLsatlv) SetValue(v []uint8) bool {
	if t.Type == RouterInfoTlvtype_Capabilities {
		return false
	} else if t.Type == RouterInfoTlvtype_FunctionalCapabilities {
		return false
	} else if t.Type == RouterInfoTlvtype_Srv6Capabilities {
		return false
	} else if true {
		if len(v) > int(^uint16(0)) {
			return false
		}
		if _, ok := t.union81_.(*union_86_t); !ok {
			t.union81_ = &union_86_t{}
		}
		t.Length = uint16(len(v))
		t.union81_.(*union_86_t).Value = []uint8(v)
		return true
	}
	return false
}
func (t *RouterInfoOpaqueLsatlv) Visit(v VisitorTIJJO) {
	v.Visit(v, "Type", &t.Type)
	v.Visit(v, "Length", &t.Length)
	v.Visit(v, "Capabilities", (t.Capabilities()))
	v.Visit(v, "FunctionalCapabilities", (t.FunctionalCapabilities()))
	v.Visit(v, "Srv6Capabilities", (t.Srv6Capabilities()))
	v.Visit(v, "Value", (t.Value()))
}
func (t *RouterInfoOpaqueLsatlv) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *RouterInfoOpaqueLsatlv) Write(w io.Writer) (err error) {
	tmp87 := [2]byte{}
	binary.BigEndian.PutUint16(tmp87[:], uint16(t.Type))
	if n, err := w.Write(tmp87[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Type: %w", err)
	}
	tmp88 := [2]byte{}
	binary.BigEndian.PutUint16(tmp88[:], uint16(t.Length))
	if n, err := w.Write(tmp88[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Length: %w", err)
	}
	switch {
	case (t.Type == RouterInfoTlvtype_Capabilities):
		if _, ok := t.union81_.(*union_83_t); !ok {
			return fmt.Errorf("encode t.union81_: union is not set to union_83_t")
		}
		new_buf_89 := bytes.NewBuffer(nil)
		old_buf_89_w := w
		w = new_buf_89
		if err := t.union81_.(*union_83_t).Capabilities.Write(w); err != nil {
			return fmt.Errorf("encode Capabilities: %w", err)
		}
		if new_buf_89.Len() != int(t.Length) {
			return fmt.Errorf("encode Capabilities: expect %d bytes but got %d bytes", new_buf_89.Len(), int(t.Length))
		}
		_, err = new_buf_89.WriteTo(old_buf_89_w)
		if err != nil {
			return err
		}
		w = old_buf_89_w
	case (t.Type == RouterInfoTlvtype_FunctionalCapabilities):
		if _, ok := t.union81_.(*union_84_t); !ok {
			return fmt.Errorf("encode t.union81_: union is not set to union_84_t")
		}
		new_buf_90 := bytes.NewBuffer(nil)
		old_buf_90_w := w
		w = new_buf_90
		if err := t.union81_.(*union_84_t).FunctionalCapabilities.Write(w); err != nil {
			return fmt.Errorf("encode FunctionalCapabilities: %w", err)
		}
		if new_buf_90.Len() != int(t.Length) {
			return fmt.Errorf("encode FunctionalCapabilities: expect %d bytes but got %d bytes", new_buf_90.Len(), int(t.Length))
		}
		_, err = new_buf_90.WriteTo(old_buf_90_w)
		if err != nil {
			return err
		}
		w = old_buf_90_w
	case (t.Type == RouterInfoTlvtype_Srv6Capabilities):
		if _, ok := t.union81_.(*union_85_t); !ok {
			return fmt.Errorf("encode t.union81_: union is not set to union_85_t")
		}
		new_buf_91 := bytes.NewBuffer(nil)
		old_buf_91_w := w
		w = new_buf_91
		if err := t.union81_.(*union_85_t).Srv6Capabilities.Write(w); err != nil {
			return fmt.Errorf("encode Srv6Capabilities: %w", err)
		}
		if new_buf_91.Len() != int(t.Length) {
			return fmt.Errorf("encode Srv6Capabilities: expect %d bytes but got %d bytes", new_buf_91.Len(), int(t.Length))
		}
		_, err = new_buf_91.WriteTo(old_buf_91_w)
		if err != nil {
			return err
		}
		w = old_buf_91_w
	default:
		if _, ok := t.union81_.(*union_86_t); !ok {
			return fmt.Errorf("encode t.union81_: union is not set to union_86_t")
		}
		len_Value := int(t.Length)
		if len(t.union81_.(*union_86_t).Value) != len_Value {
			return fmt.Errorf("encode Value: expect %d bytes but got %d bytes", len_Value, len(t.union81_.(*union_86_t).Value))
		}
		if n, err := w.Write(t.union81_.(*union_86_t).Value); err != nil || n != len(t.union81_.(*union_86_t).Value) {
			return fmt.Errorf("encode Value: %w", err)
		}
	}
	return nil
}
func (t *RouterInfoOpaqueLsatlv) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 4))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *RouterInfoOpaqueLsatlv) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *RouterInfoOpaqueLsatlv) Read(r io.Reader) (err error) {
	tmpType := [2]byte{}
	n_Type, err := io.ReadFull(r, tmpType[:])
	if err != nil {
		return fmt.Errorf("read Type: expect 2 bytes but read %d bytes: %w", n_Type, err)
	}
	t.Type = RouterInfoTlvtype(binary.BigEndian.Uint16(tmpType[:]))
	tmpLength := [2]byte{}
	n_Length, err := io.ReadFull(r, tmpLength[:])
	if err != nil {
		return fmt.Errorf("read Length: expect 2 bytes but read %d bytes: %w", n_Length, err)
	}
	t.Length = uint16(binary.BigEndian.Uint16(tmpLength[:]))
	switch {
	case (t.Type == RouterInfoTlvtype_Capabilities):
		t.union81_ = &union_83_t{}
		sub_byte_len_Capabilities := int64(t.Length)
		sub_byte_r_Capabilities := io.LimitReader(r, int64(sub_byte_len_Capabilities))
		tmp_old_r_Capabilities_92 := r
		r = sub_byte_r_Capabilities
		if err := t.union81_.(*union_83_t).Capabilities.Read(r); err != nil {
			return fmt.Errorf("read Capabilities: %w", err)
		}
		if sub_byte_r_Capabilities.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read Capabilities: expect %d bytes but got %d bytes", sub_byte_len_Capabilities, sub_byte_len_Capabilities-sub_byte_r_Capabilities.(*io.LimitedReader).N)
		}
		r = tmp_old_r_Capabilities_92
	case (t.Type == RouterInfoTlvtype_FunctionalCapabilities):
		t.union81_ = &union_84_t{}
		sub_byte_len_FunctionalCapabilities := int64(t.Length)
		sub_byte_r_FunctionalCapabilities := io.LimitReader(r, int64(sub_byte_len_FunctionalCapabilities))
		tmp_old_r_FunctionalCapabilities_93 := r
		r = sub_byte_r_FunctionalCapabilities
		if err := t.union81_.(*union_84_t).FunctionalCapabilities.Read(r); err != nil {
			return fmt.Errorf("read FunctionalCapabilities: %w", err)
		}
		if sub_byte_r_FunctionalCapabilities.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read FunctionalCapabilities: expect %d bytes but got %d bytes", sub_byte_len_FunctionalCapabilities, sub_byte_len_FunctionalCapabilities-sub_byte_r_FunctionalCapabilities.(*io.LimitedReader).N)
		}
		r = tmp_old_r_FunctionalCapabilities_93
	case (t.Type == RouterInfoTlvtype_Srv6Capabilities):
		t.union81_ = &union_85_t{}
		sub_byte_len_Srv6Capabilities := int64(t.Length)
		sub_byte_r_Srv6Capabilities := io.LimitReader(r, int64(sub_byte_len_Srv6Capabilities))
		tmp_old_r_Srv6Capabilities_94 := r
		r = sub_byte_r_Srv6Capabilities
		if err := t.union81_.(*union_85_t).Srv6Capabilities.Read(r); err != nil {
			return fmt.Errorf("read Srv6Capabilities: %w", err)
		}
		if sub_byte_r_Srv6Capabilities.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read Srv6Capabilities: expect %d bytes but got %d bytes", sub_byte_len_Srv6Capabilities, sub_byte_len_Srv6Capabilities-sub_byte_r_Srv6Capabilities.(*io.LimitedReader).N)
		}
		r = tmp_old_r_Srv6Capabilities_94
	default:
		t.union81_ = &union_86_t{}
		len_Value := int(t.Length)
		if len_Value != 0 {
			tmpValue := make([]byte, len_Value)
			n_Value, err := io.ReadFull(r, tmpValue[:])
			if err != nil {
				return fmt.Errorf("read Value: expect %d bytes but read %d bytes: %w", len_Value, n_Value, err)
			}
			t.union81_.(*union_86_t).Value = tmpValue[:]
		} else {
			t.union81_.(*union_86_t).Value = nil
		}
	}
	return nil
}

func (t *RouterInfoOpaqueLsatlv) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *RouterInfoOpaqueLsatlv) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode RouterInfoOpaqueLsatlv: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *RouterInfoOpaqueLsa) Visit(v VisitorTIJJO) {
	v.Visit(v, "Tlvs", &t.Tlvs)
}
func (t *RouterInfoOpaqueLsa) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *RouterInfoOpaqueLsa) Write(w io.Writer) (err error) {
	for _, v := range t.Tlvs {
		if err := v.Write(w); err != nil {
			return fmt.Errorf("encode Tlvs: %w", err)
		}
	}
	return nil
}
func (t *RouterInfoOpaqueLsa) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 0))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *RouterInfoOpaqueLsa) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *RouterInfoOpaqueLsa) Read(r io.Reader) (err error) {
	tmp_byte_scanner95_ := bufio.NewReaderSize(r, 1)
	old_r_Tlvs := r
	r = tmp_byte_scanner95_
	for {
		_, err := tmp_byte_scanner95_.ReadByte()
		if err != nil {
			if err != io.EOF {
				return fmt.Errorf("read Tlvs: %w", err)
			}
			break
		}
		if err := tmp_byte_scanner95_.UnreadByte(); err != nil {
			return fmt.Errorf("read Tlvs: unexpected unread error: %w", err)
		}
		var tmp96_ RouterInfoOpaqueLsatlv
		if err := tmp96_.Read(r); err != nil {
			return fmt.Errorf("read Tlvs: %w", err)
		}
		t.Tlvs = append(t.Tlvs, tmp96_)
	}
	r = old_r_Tlvs
	return nil
}

func (t *RouterInfoOpaqueLsa) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *RouterInfoOpaqueLsa) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode RouterInfoOpaqueLsa: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *Srv6EndSid) Visit(v VisitorTIJJO) {
	v.Visit(v, "Flags", &t.Flags)
	v.Visit(v, "Reserved", &t.Reserved)
	v.Visit(v, "Behavior", &t.Behavior)
	v.Visit(v, "Sid", &t.Sid)
	v.Visit(v, "SubTlvs", &t.SubTlvs)
}
func (t *Srv6EndSid) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *Srv6EndSid) Write(w io.Writer) (err error) {
	if n, err := w.Write([]byte{byte(t.Flags)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Flags: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Reserved)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Reserved: %w", err)
	}
	tmp97 := [2]byte{}
	binary.BigEndian.PutUint16(tmp97[:], uint16(t.Behavior))
	if n, err := w.Write(tmp97[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Behavior: %w", err)
	}
	if n, err := w.Write(t.Sid[:]); err != nil || n != len(t.Sid) {
		return fmt.Errorf("encode Sid: %w", err)
	}
	for _, v := range t.SubTlvs {
		if err := v.Write(w); err != nil {
			return fmt.Errorf("encode SubTlvs: %w", err)
		}
	}
	return nil
}
func (t *Srv6EndSid) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 20))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *Srv6EndSid) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *Srv6EndSid) Read(r io.Reader) (err error) {
	tmpFlags := [1]byte{}
	n_Flags, err := io.ReadFull(r, tmpFlags[:])
	if err != nil {
		return fmt.Errorf("read Flags: expect 1 byte but read %d bytes: %w", n_Flags, err)
	}
	t.Flags = uint8(tmpFlags[0])
	tmpReserved := [1]byte{}
	n_Reserved, err := io.ReadFull(r, tmpReserved[:])
	if err != nil {
		return fmt.Errorf("read Reserved: expect 1 byte but read %d bytes: %w", n_Reserved, err)
	}
	t.Reserved = uint8(tmpReserved[0])
	tmpBehavior := [2]byte{}
	n_Behavior, err := io.ReadFull(r, tmpBehavior[:])
	if err != nil {
		return fmt.Errorf("read Behavior: expect 2 bytes but read %d bytes: %w", n_Behavior, err)
	}
	t.Behavior = EndpointBehavior(binary.BigEndian.Uint16(tmpBehavior[:]))
	n_Sid, err := io.ReadFull(r, t.Sid[:])
	if err != nil {
		return fmt.Errorf("read Sid: expect %d bytes but read %d bytes: %w", 16, n_Sid, err)
	}
	tmp_byte_scanner98_ := bufio.NewReaderSize(r, 1)
	old_r_SubTlvs := r
	r = tmp_byte_scanner98_
	for {
		_, err := tmp_byte_scanner98_.ReadByte()
		if err != nil {
			if err != io.EOF {
				return fmt.Errorf("read SubTlvs: %w", err)
			}
			break
		}
		if err := tmp_byte_scanner98_.UnreadByte(); err != nil {
			return fmt.Errorf("read SubTlvs: unexpected unread error: %w", err)
		}
		var tmp99_ Srv6EndSidsubTlv
		if err := tmp99_.Read(r); err != nil {
			return fmt.Errorf("read SubTlvs: %w", err)
		}
		t.SubTlvs = append(t.SubTlvs, tmp99_)
	}
	r = old_r_SubTlvs
	return nil
}

func (t *Srv6EndSid) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *Srv6EndSid) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode Srv6EndSid: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *union_102_t) isunion100_() {}
func (t *union_103_t) isunion100_() {}
func (t *union_104_t) isunion100_() {}
func (t *union_105_t) isunion100_() {}
func (t *union_106_t) isunion100_() {}
func (t *union_107_t) isunion100_() {}
func (t *union_108_t) isunion100_() {}
func (t *LocatorTlvsubTlv) Ipv6ForwardingAddress() *Ipv6ForwardingAddress {
	if t.Type == LocatorTlvsubTlvtype_Srv6EndSid {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_Ipv6ForwardingAddress {
		if _, ok := t.union100_.(*union_103_t); !ok {
			return nil // not set
		}
		tmp := Ipv6ForwardingAddress(t.union100_.(*union_103_t).Ipv6ForwardingAddress)
		return &tmp
	}
	return nil
}
func (t *LocatorTlvsubTlv) SetIpv6ForwardingAddress(v Ipv6ForwardingAddress) bool {
	if t.Type == LocatorTlvsubTlvtype_Srv6EndSid {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_Ipv6ForwardingAddress {
		if _, ok := t.union100_.(*union_103_t); !ok {
			t.union100_ = &union_103_t{}
		}
		t.union100_.(*union_103_t).Ipv6ForwardingAddress = Ipv6ForwardingAddress(v)
		return true
	}
	return false
}
func (t *LocatorTlvsubTlv) PrefixSourceOspfRouterAddress() *PrefixSourceRouterAddress {
	if t.Type == LocatorTlvsubTlvtype_Srv6EndSid {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_Ipv6ForwardingAddress {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_RouteTag {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_PrefixSourceOspfRouterId {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_PrefixSourceOspfRouterAddress {
		if _, ok := t.union100_.(*union_106_t); !ok {
			return nil // not set
		}
		tmp := PrefixSourceRouterAddress(t.union100_.(*union_106_t).PrefixSourceOspfRouterAddress)
		return &tmp
	}
	return nil
}
func (t *LocatorTlvsubTlv) SetPrefixSourceOspfRouterAddress(v PrefixSourceRouterAddress) bool {
	if t.Type == LocatorTlvsubTlvtype_Srv6EndSid {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_Ipv6ForwardingAddress {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_RouteTag {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_PrefixSourceOspfRouterId {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_PrefixSourceOspfRouterAddress {
		if _, ok := t.union100_.(*union_106_t); !ok {
			t.union100_ = &union_106_t{}
		}
		t.union100_.(*union_106_t).PrefixSourceOspfRouterAddress = PrefixSourceRouterAddress(v)
		return true
	}
	return false
}
func (t *LocatorTlvsubTlv) PrefixSourceOspfRouterId() *PrefixSourceRouterId {
	if t.Type == LocatorTlvsubTlvtype_Srv6EndSid {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_Ipv6ForwardingAddress {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_RouteTag {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_PrefixSourceOspfRouterId {
		if _, ok := t.union100_.(*union_105_t); !ok {
			return nil // not set
		}
		tmp := PrefixSourceRouterId(t.union100_.(*union_105_t).PrefixSourceOspfRouterId)
		return &tmp
	}
	return nil
}
func (t *LocatorTlvsubTlv) SetPrefixSourceOspfRouterId(v PrefixSourceRouterId) bool {
	if t.Type == LocatorTlvsubTlvtype_Srv6EndSid {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_Ipv6ForwardingAddress {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_RouteTag {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_PrefixSourceOspfRouterId {
		if _, ok := t.union100_.(*union_105_t); !ok {
			t.union100_ = &union_105_t{}
		}
		t.union100_.(*union_105_t).PrefixSourceOspfRouterId = PrefixSourceRouterId(v)
		return true
	}
	return false
}
func (t *LocatorTlvsubTlv) RouteTag() *RouteTag {
	if t.Type == LocatorTlvsubTlvtype_Srv6EndSid {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_Ipv6ForwardingAddress {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_RouteTag {
		if _, ok := t.union100_.(*union_104_t); !ok {
			return nil // not set
		}
		tmp := RouteTag(t.union100_.(*union_104_t).RouteTag)
		return &tmp
	}
	return nil
}
func (t *LocatorTlvsubTlv) SetRouteTag(v RouteTag) bool {
	if t.Type == LocatorTlvsubTlvtype_Srv6EndSid {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_Ipv6ForwardingAddress {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_RouteTag {
		if _, ok := t.union100_.(*union_104_t); !ok {
			t.union100_ = &union_104_t{}
		}
		t.union100_.(*union_104_t).RouteTag = RouteTag(v)
		return true
	}
	return false
}
func (t *LocatorTlvsubTlv) Srv6EndSid() *Srv6EndSid {
	if t.Type == LocatorTlvsubTlvtype_Srv6EndSid {
		if _, ok := t.union100_.(*union_102_t); !ok {
			return nil // not set
		}
		tmp := Srv6EndSid(t.union100_.(*union_102_t).Srv6EndSid)
		return &tmp
	}
	return nil
}
func (t *LocatorTlvsubTlv) SetSrv6EndSid(v Srv6EndSid) bool {
	if t.Type == LocatorTlvsubTlvtype_Srv6EndSid {
		if _, ok := t.union100_.(*union_102_t); !ok {
			t.union100_ = &union_102_t{}
		}
		t.union100_.(*union_102_t).Srv6EndSid = Srv6EndSid(v)
		return true
	}
	return false
}
func (t *LocatorTlvsubTlv) Srv6SidStructure() *Srv6SidstructureSubTlv {
	if t.Type == LocatorTlvsubTlvtype_Srv6EndSid {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_Ipv6ForwardingAddress {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_RouteTag {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_PrefixSourceOspfRouterId {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_PrefixSourceOspfRouterAddress {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_Srv6SidStructure {
		if _, ok := t.union100_.(*union_107_t); !ok {
			return nil // not set
		}
		tmp := Srv6SidstructureSubTlv(t.union100_.(*union_107_t).Srv6SidStructure)
		return &tmp
	}
	return nil
}
func (t *LocatorTlvsubTlv) SetSrv6SidStructure(v Srv6SidstructureSubTlv) bool {
	if t.Type == LocatorTlvsubTlvtype_Srv6EndSid {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_Ipv6ForwardingAddress {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_RouteTag {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_PrefixSourceOspfRouterId {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_PrefixSourceOspfRouterAddress {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_Srv6SidStructure {
		if _, ok := t.union100_.(*union_107_t); !ok {
			t.union100_ = &union_107_t{}
		}
		t.union100_.(*union_107_t).Srv6SidStructure = Srv6SidstructureSubTlv(v)
		return true
	}
	return false
}
func (t *LocatorTlvsubTlv) Value() *[]uint8 {
	if t.Type == LocatorTlvsubTlvtype_Srv6EndSid {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_Ipv6ForwardingAddress {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_RouteTag {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_PrefixSourceOspfRouterId {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_PrefixSourceOspfRouterAddress {
		return nil
	} else if t.Type == LocatorTlvsubTlvtype_Srv6SidStructure {
		return nil
	} else if true {
		if _, ok := t.union100_.(*union_108_t); !ok {
			return nil // not set
		}
		tmp := []uint8(t.union100_.(*union_108_t).Value)
		return &tmp
	}
	return nil
}
func (t *LocatorTlvsubTlv) SetValue(v []uint8) bool {
	if t.Type == LocatorTlvsubTlvtype_Srv6EndSid {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_Ipv6ForwardingAddress {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_RouteTag {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_PrefixSourceOspfRouterId {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_PrefixSourceOspfRouterAddress {
		return false
	} else if t.Type == LocatorTlvsubTlvtype_Srv6SidStructure {
		return false
	} else if true {
		if len(v) > int(^uint16(0)) {
			return false
		}
		if _, ok := t.union100_.(*union_108_t); !ok {
			t.union100_ = &union_108_t{}
		}
		t.Length = uint16(len(v))
		t.union100_.(*union_108_t).Value = []uint8(v)
		return true
	}
	return false
}
func (t *LocatorTlvsubTlv) Visit(v VisitorTIJJO) {
	v.Visit(v, "Type", &t.Type)
	v.Visit(v, "Length", &t.Length)
	v.Visit(v, "Ipv6ForwardingAddress", (t.Ipv6ForwardingAddress()))
	v.Visit(v, "PrefixSourceOspfRouterAddress", (t.PrefixSourceOspfRouterAddress()))
	v.Visit(v, "PrefixSourceOspfRouterId", (t.PrefixSourceOspfRouterId()))
	v.Visit(v, "RouteTag", (t.RouteTag()))
	v.Visit(v, "Srv6EndSid", (t.Srv6EndSid()))
	v.Visit(v, "Srv6SidStructure", (t.Srv6SidStructure()))
	v.Visit(v, "Value", (t.Value()))
}
func (t *LocatorTlvsubTlv) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *LocatorTlvsubTlv) Write(w io.Writer) (err error) {
	tmp109 := [2]byte{}
	binary.BigEndian.PutUint16(tmp109[:], uint16(t.Type))
	if n, err := w.Write(tmp109[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Type: %w", err)
	}
	tmp110 := [2]byte{}
	binary.BigEndian.PutUint16(tmp110[:], uint16(t.Length))
	if n, err := w.Write(tmp110[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Length: %w", err)
	}
	switch {
	case (t.Type == LocatorTlvsubTlvtype_Srv6EndSid):
		if _, ok := t.union100_.(*union_102_t); !ok {
			return fmt.Errorf("encode t.union100_: union is not set to union_102_t")
		}
		new_buf_111 := bytes.NewBuffer(nil)
		old_buf_111_w := w
		w = new_buf_111
		if err := t.union100_.(*union_102_t).Srv6EndSid.Write(w); err != nil {
			return fmt.Errorf("encode Srv6EndSid: %w", err)
		}
		if new_buf_111.Len() != int(t.Length) {
			return fmt.Errorf("encode Srv6EndSid: expect %d bytes but got %d bytes", new_buf_111.Len(), int(t.Length))
		}
		_, err = new_buf_111.WriteTo(old_buf_111_w)
		if err != nil {
			return err
		}
		w = old_buf_111_w
	case (t.Type == LocatorTlvsubTlvtype_Ipv6ForwardingAddress):
		if _, ok := t.union100_.(*union_103_t); !ok {
			return fmt.Errorf("encode t.union100_: union is not set to union_103_t")
		}
		new_buf_112 := bytes.NewBuffer(nil)
		old_buf_112_w := w
		w = new_buf_112
		if err := t.union100_.(*union_103_t).Ipv6ForwardingAddress.Write(w); err != nil {
			return fmt.Errorf("encode Ipv6ForwardingAddress: %w", err)
		}
		if new_buf_112.Len() != int(t.Length) {
			return fmt.Errorf("encode Ipv6ForwardingAddress: expect %d bytes but got %d bytes", new_buf_112.Len(), int(t.Length))
		}
		_, err = new_buf_112.WriteTo(old_buf_112_w)
		if err != nil {
			return err
		}
		w = old_buf_112_w
	case (t.Type == LocatorTlvsubTlvtype_RouteTag):
		if _, ok := t.union100_.(*union_104_t); !ok {
			return fmt.Errorf("encode t.union100_: union is not set to union_104_t")
		}
		new_buf_113 := bytes.NewBuffer(nil)
		old_buf_113_w := w
		w = new_buf_113
		if err := t.union100_.(*union_104_t).RouteTag.Write(w); err != nil {
			return fmt.Errorf("encode RouteTag: %w", err)
		}
		if new_buf_113.Len() != int(t.Length) {
			return fmt.Errorf("encode RouteTag: expect %d bytes but got %d bytes", new_buf_113.Len(), int(t.Length))
		}
		_, err = new_buf_113.WriteTo(old_buf_113_w)
		if err != nil {
			return err
		}
		w = old_buf_113_w
	case (t.Type == LocatorTlvsubTlvtype_PrefixSourceOspfRouterId):
		if _, ok := t.union100_.(*union_105_t); !ok {
			return fmt.Errorf("encode t.union100_: union is not set to union_105_t")
		}
		new_buf_114 := bytes.NewBuffer(nil)
		old_buf_114_w := w
		w = new_buf_114
		if err := t.union100_.(*union_105_t).PrefixSourceOspfRouterId.Write(w); err != nil {
			return fmt.Errorf("encode PrefixSourceOspfRouterId: %w", err)
		}
		if new_buf_114.Len() != int(t.Length) {
			return fmt.Errorf("encode PrefixSourceOspfRouterId: expect %d bytes but got %d bytes", new_buf_114.Len(), int(t.Length))
		}
		_, err = new_buf_114.WriteTo(old_buf_114_w)
		if err != nil {
			return err
		}
		w = old_buf_114_w
	case (t.Type == LocatorTlvsubTlvtype_PrefixSourceOspfRouterAddress):
		if _, ok := t.union100_.(*union_106_t); !ok {
			return fmt.Errorf("encode t.union100_: union is not set to union_106_t")
		}
		new_buf_115 := bytes.NewBuffer(nil)
		old_buf_115_w := w
		w = new_buf_115
		if err := t.union100_.(*union_106_t).PrefixSourceOspfRouterAddress.Write(w); err != nil {
			return fmt.Errorf("encode PrefixSourceOspfRouterAddress: %w", err)
		}
		if new_buf_115.Len() != int(t.Length) {
			return fmt.Errorf("encode PrefixSourceOspfRouterAddress: expect %d bytes but got %d bytes", new_buf_115.Len(), int(t.Length))
		}
		_, err = new_buf_115.WriteTo(old_buf_115_w)
		if err != nil {
			return err
		}
		w = old_buf_115_w
	case (t.Type == LocatorTlvsubTlvtype_Srv6SidStructure):
		if _, ok := t.union100_.(*union_107_t); !ok {
			return fmt.Errorf("encode t.union100_: union is not set to union_107_t")
		}
		new_buf_116 := bytes.NewBuffer(nil)
		old_buf_116_w := w
		w = new_buf_116
		if err := t.union100_.(*union_107_t).Srv6SidStructure.Write(w); err != nil {
			return fmt.Errorf("encode Srv6SidStructure: %w", err)
		}
		if new_buf_116.Len() != int(t.Length) {
			return fmt.Errorf("encode Srv6SidStructure: expect %d bytes but got %d bytes", new_buf_116.Len(), int(t.Length))
		}
		_, err = new_buf_116.WriteTo(old_buf_116_w)
		if err != nil {
			return err
		}
		w = old_buf_116_w
	default:
		if _, ok := t.union100_.(*union_108_t); !ok {
			return fmt.Errorf("encode t.union100_: union is not set to union_108_t")
		}
		len_Value := int(t.Length)
		if len(t.union100_.(*union_108_t).Value) != len_Value {
			return fmt.Errorf("encode Value: expect %d bytes but got %d bytes", len_Value, len(t.union100_.(*union_108_t).Value))
		}
		if n, err := w.Write(t.union100_.(*union_108_t).Value); err != nil || n != len(t.union100_.(*union_108_t).Value) {
			return fmt.Errorf("encode Value: %w", err)
		}
	}
	return nil
}
func (t *LocatorTlvsubTlv) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 4))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *LocatorTlvsubTlv) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *LocatorTlvsubTlv) Read(r io.Reader) (err error) {
	tmpType := [2]byte{}
	n_Type, err := io.ReadFull(r, tmpType[:])
	if err != nil {
		return fmt.Errorf("read Type: expect 2 bytes but read %d bytes: %w", n_Type, err)
	}
	t.Type = LocatorTlvsubTlvtype(binary.BigEndian.Uint16(tmpType[:]))
	tmpLength := [2]byte{}
	n_Length, err := io.ReadFull(r, tmpLength[:])
	if err != nil {
		return fmt.Errorf("read Length: expect 2 bytes but read %d bytes: %w", n_Length, err)
	}
	t.Length = uint16(binary.BigEndian.Uint16(tmpLength[:]))
	switch {
	case (t.Type == LocatorTlvsubTlvtype_Srv6EndSid):
		t.union100_ = &union_102_t{}
		sub_byte_len_Srv6EndSid := int64(t.Length)
		sub_byte_r_Srv6EndSid := io.LimitReader(r, int64(sub_byte_len_Srv6EndSid))
		tmp_old_r_Srv6EndSid_117 := r
		r = sub_byte_r_Srv6EndSid
		if err := t.union100_.(*union_102_t).Srv6EndSid.Read(r); err != nil {
			return fmt.Errorf("read Srv6EndSid: %w", err)
		}
		if sub_byte_r_Srv6EndSid.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read Srv6EndSid: expect %d bytes but got %d bytes", sub_byte_len_Srv6EndSid, sub_byte_len_Srv6EndSid-sub_byte_r_Srv6EndSid.(*io.LimitedReader).N)
		}
		r = tmp_old_r_Srv6EndSid_117
	case (t.Type == LocatorTlvsubTlvtype_Ipv6ForwardingAddress):
		t.union100_ = &union_103_t{}
		sub_byte_len_Ipv6ForwardingAddress := int64(t.Length)
		sub_byte_r_Ipv6ForwardingAddress := io.LimitReader(r, int64(sub_byte_len_Ipv6ForwardingAddress))
		tmp_old_r_Ipv6ForwardingAddress_118 := r
		r = sub_byte_r_Ipv6ForwardingAddress
		if err := t.union100_.(*union_103_t).Ipv6ForwardingAddress.Read(r); err != nil {
			return fmt.Errorf("read Ipv6ForwardingAddress: %w", err)
		}
		if sub_byte_r_Ipv6ForwardingAddress.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read Ipv6ForwardingAddress: expect %d bytes but got %d bytes", sub_byte_len_Ipv6ForwardingAddress, sub_byte_len_Ipv6ForwardingAddress-sub_byte_r_Ipv6ForwardingAddress.(*io.LimitedReader).N)
		}
		r = tmp_old_r_Ipv6ForwardingAddress_118
	case (t.Type == LocatorTlvsubTlvtype_RouteTag):
		t.union100_ = &union_104_t{}
		sub_byte_len_RouteTag := int64(t.Length)
		sub_byte_r_RouteTag := io.LimitReader(r, int64(sub_byte_len_RouteTag))
		tmp_old_r_RouteTag_119 := r
		r = sub_byte_r_RouteTag
		if err := t.union100_.(*union_104_t).RouteTag.Read(r); err != nil {
			return fmt.Errorf("read RouteTag: %w", err)
		}
		if sub_byte_r_RouteTag.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read RouteTag: expect %d bytes but got %d bytes", sub_byte_len_RouteTag, sub_byte_len_RouteTag-sub_byte_r_RouteTag.(*io.LimitedReader).N)
		}
		r = tmp_old_r_RouteTag_119
	case (t.Type == LocatorTlvsubTlvtype_PrefixSourceOspfRouterId):
		t.union100_ = &union_105_t{}
		sub_byte_len_PrefixSourceOspfRouterId := int64(t.Length)
		sub_byte_r_PrefixSourceOspfRouterId := io.LimitReader(r, int64(sub_byte_len_PrefixSourceOspfRouterId))
		tmp_old_r_PrefixSourceOspfRouterId_120 := r
		r = sub_byte_r_PrefixSourceOspfRouterId
		if err := t.union100_.(*union_105_t).PrefixSourceOspfRouterId.Read(r); err != nil {
			return fmt.Errorf("read PrefixSourceOspfRouterId: %w", err)
		}
		if sub_byte_r_PrefixSourceOspfRouterId.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read PrefixSourceOspfRouterId: expect %d bytes but got %d bytes", sub_byte_len_PrefixSourceOspfRouterId, sub_byte_len_PrefixSourceOspfRouterId-sub_byte_r_PrefixSourceOspfRouterId.(*io.LimitedReader).N)
		}
		r = tmp_old_r_PrefixSourceOspfRouterId_120
	case (t.Type == LocatorTlvsubTlvtype_PrefixSourceOspfRouterAddress):
		t.union100_ = &union_106_t{}
		sub_byte_len_PrefixSourceOspfRouterAddress := int64(t.Length)
		sub_byte_r_PrefixSourceOspfRouterAddress := io.LimitReader(r, int64(sub_byte_len_PrefixSourceOspfRouterAddress))
		tmp_old_r_PrefixSourceOspfRouterAddress_121 := r
		r = sub_byte_r_PrefixSourceOspfRouterAddress
		if err := t.union100_.(*union_106_t).PrefixSourceOspfRouterAddress.Read(r); err != nil {
			return fmt.Errorf("read PrefixSourceOspfRouterAddress: %w", err)
		}
		if sub_byte_r_PrefixSourceOspfRouterAddress.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read PrefixSourceOspfRouterAddress: expect %d bytes but got %d bytes", sub_byte_len_PrefixSourceOspfRouterAddress, sub_byte_len_PrefixSourceOspfRouterAddress-sub_byte_r_PrefixSourceOspfRouterAddress.(*io.LimitedReader).N)
		}
		r = tmp_old_r_PrefixSourceOspfRouterAddress_121
	case (t.Type == LocatorTlvsubTlvtype_Srv6SidStructure):
		t.union100_ = &union_107_t{}
		sub_byte_len_Srv6SidStructure := int64(t.Length)
		sub_byte_r_Srv6SidStructure := io.LimitReader(r, int64(sub_byte_len_Srv6SidStructure))
		tmp_old_r_Srv6SidStructure_122 := r
		r = sub_byte_r_Srv6SidStructure
		if err := t.union100_.(*union_107_t).Srv6SidStructure.Read(r); err != nil {
			return fmt.Errorf("read Srv6SidStructure: %w", err)
		}
		if sub_byte_r_Srv6SidStructure.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read Srv6SidStructure: expect %d bytes but got %d bytes", sub_byte_len_Srv6SidStructure, sub_byte_len_Srv6SidStructure-sub_byte_r_Srv6SidStructure.(*io.LimitedReader).N)
		}
		r = tmp_old_r_Srv6SidStructure_122
	default:
		t.union100_ = &union_108_t{}
		len_Value := int(t.Length)
		if len_Value != 0 {
			tmpValue := make([]byte, len_Value)
			n_Value, err := io.ReadFull(r, tmpValue[:])
			if err != nil {
				return fmt.Errorf("read Value: expect %d bytes but read %d bytes: %w", len_Value, n_Value, err)
			}
			t.union100_.(*union_108_t).Value = tmpValue[:]
		} else {
			t.union100_.(*union_108_t).Value = nil
		}
	}
	return nil
}

func (t *LocatorTlvsubTlv) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *LocatorTlvsubTlv) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode LocatorTlvsubTlv: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *LocatorTlv) SetLocator(v []uint8) bool {
	t.Locator = v
	return true
}
func (t *LocatorTlv) Visit(v VisitorTIJJO) {
	v.Visit(v, "RouteType", &t.RouteType)
	v.Visit(v, "Algorithm", &t.Algorithm)
	v.Visit(v, "LocatorLength", &t.LocatorLength)
	v.Visit(v, "PrefixOptions", &t.PrefixOptions)
	v.Visit(v, "Metric", &t.Metric)
	v.Visit(v, "Locator", &t.Locator)
	v.Visit(v, "SubTlvs", &t.SubTlvs)
}
func (t *LocatorTlv) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *LocatorTlv) Write(w io.Writer) (err error) {
	if n, err := w.Write([]byte{byte(t.RouteType)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.RouteType: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Algorithm)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Algorithm: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.LocatorLength)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.LocatorLength: %w", err)
	}
	if err := t.PrefixOptions.Write(w); err != nil {
		return fmt.Errorf("encode PrefixOptions: %w", err)
	}
	tmp123 := [4]byte{}
	binary.BigEndian.PutUint32(tmp123[:], uint32(t.Metric))
	if n, err := w.Write(tmp123[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.Metric: %w", err)
	}
	LocatorInByte := ((t.LocatorLength + 7) / 8)
	len_Locator := int(LocatorInByte)
	if len(t.Locator) != len_Locator {
		return fmt.Errorf("encode Locator: expect %d bytes but got %d bytes", len_Locator, len(t.Locator))
	}
	if n, err := w.Write(t.Locator); err != nil || n != len(t.Locator) {
		return fmt.Errorf("encode Locator: %w", err)
	}
	for _, v := range t.SubTlvs {
		if err := v.Write(w); err != nil {
			return fmt.Errorf("encode SubTlvs: %w", err)
		}
	}
	return nil
}
func (t *LocatorTlv) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 8))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *LocatorTlv) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *LocatorTlv) Read(r io.Reader) (err error) {
	tmpRouteType := [1]byte{}
	n_RouteType, err := io.ReadFull(r, tmpRouteType[:])
	if err != nil {
		return fmt.Errorf("read RouteType: expect 1 byte but read %d bytes: %w", n_RouteType, err)
	}
	t.RouteType = OspfrouteType(tmpRouteType[0])
	tmpAlgorithm := [1]byte{}
	n_Algorithm, err := io.ReadFull(r, tmpAlgorithm[:])
	if err != nil {
		return fmt.Errorf("read Algorithm: expect 1 byte but read %d bytes: %w", n_Algorithm, err)
	}
	t.Algorithm = uint8(tmpAlgorithm[0])
	tmpLocatorLength := [1]byte{}
	n_LocatorLength, err := io.ReadFull(r, tmpLocatorLength[:])
	if err != nil {
		return fmt.Errorf("read LocatorLength: expect 1 byte but read %d bytes: %w", n_LocatorLength, err)
	}
	t.LocatorLength = uint8(tmpLocatorLength[0])
	if err := t.PrefixOptions.Read(r); err != nil {
		return fmt.Errorf("read PrefixOptions: %w", err)
	}
	tmpMetric := [4]byte{}
	n_Metric, err := io.ReadFull(r, tmpMetric[:])
	if err != nil {
		return fmt.Errorf("read Metric: expect 4 bytes but read %d bytes: %w", n_Metric, err)
	}
	t.Metric = uint32(binary.BigEndian.Uint32(tmpMetric[:]))
	LocatorInByte := ((t.LocatorLength + 7) / 8)
	len_Locator := int(LocatorInByte)
	if len_Locator != 0 {
		tmpLocator := make([]byte, len_Locator)
		n_Locator, err := io.ReadFull(r, tmpLocator[:])
		if err != nil {
			return fmt.Errorf("read Locator: expect %d bytes but read %d bytes: %w", len_Locator, n_Locator, err)
		}
		t.Locator = tmpLocator[:]
	} else {
		t.Locator = nil
	}
	tmp_byte_scanner124_ := bufio.NewReaderSize(r, 1)
	old_r_SubTlvs := r
	r = tmp_byte_scanner124_
	for {
		_, err := tmp_byte_scanner124_.ReadByte()
		if err != nil {
			if err != io.EOF {
				return fmt.Errorf("read SubTlvs: %w", err)
			}
			break
		}
		if err := tmp_byte_scanner124_.UnreadByte(); err != nil {
			return fmt.Errorf("read SubTlvs: unexpected unread error: %w", err)
		}
		var tmp125_ LocatorTlvsubTlv
		if err := tmp125_.Read(r); err != nil {
			return fmt.Errorf("read SubTlvs: %w", err)
		}
		t.SubTlvs = append(t.SubTlvs, tmp125_)
	}
	r = old_r_SubTlvs
	return nil
}

func (t *LocatorTlv) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *LocatorTlv) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode LocatorTlv: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *union_128_t) isunion126_() {}
func (t *union_129_t) isunion126_() {}
func (t *Srv6LocatorLsatlv) Locator() *LocatorTlv {
	if t.Type == Srv6LocatorLsatlvtype_Locator {
		if _, ok := t.union126_.(*union_128_t); !ok {
			return nil // not set
		}
		tmp := LocatorTlv(t.union126_.(*union_128_t).Locator)
		return &tmp
	}
	return nil
}
func (t *Srv6LocatorLsatlv) SetLocator(v LocatorTlv) bool {
	if t.Type == Srv6LocatorLsatlvtype_Locator {
		if _, ok := t.union126_.(*union_128_t); !ok {
			t.union126_ = &union_128_t{}
		}
		t.union126_.(*union_128_t).Locator = LocatorTlv(v)
		return true
	}
	return false
}
func (t *Srv6LocatorLsatlv) Value() *[]uint8 {
	if t.Type == Srv6LocatorLsatlvtype_Locator {
		return nil
	} else if true {
		if _, ok := t.union126_.(*union_129_t); !ok {
			return nil // not set
		}
		tmp := []uint8(t.union126_.(*union_129_t).Value)
		return &tmp
	}
	return nil
}
func (t *Srv6LocatorLsatlv) SetValue(v []uint8) bool {
	if t.Type == Srv6LocatorLsatlvtype_Locator {
		return false
	} else if true {
		if len(v) > int(^uint16(0)) {
			return false
		}
		if _, ok := t.union126_.(*union_129_t); !ok {
			t.union126_ = &union_129_t{}
		}
		t.Length = uint16(len(v))
		t.union126_.(*union_129_t).Value = []uint8(v)
		return true
	}
	return false
}
func (t *Srv6LocatorLsatlv) Visit(v VisitorTIJJO) {
	v.Visit(v, "Type", &t.Type)
	v.Visit(v, "Length", &t.Length)
	v.Visit(v, "Locator", (t.Locator()))
	v.Visit(v, "Value", (t.Value()))
}
func (t *Srv6LocatorLsatlv) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *Srv6LocatorLsatlv) Write(w io.Writer) (err error) {
	tmp130 := [2]byte{}
	binary.BigEndian.PutUint16(tmp130[:], uint16(t.Type))
	if n, err := w.Write(tmp130[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Type: %w", err)
	}
	tmp131 := [2]byte{}
	binary.BigEndian.PutUint16(tmp131[:], uint16(t.Length))
	if n, err := w.Write(tmp131[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Length: %w", err)
	}
	switch {
	case (t.Type == Srv6LocatorLsatlvtype_Locator):
		if _, ok := t.union126_.(*union_128_t); !ok {
			return fmt.Errorf("encode t.union126_: union is not set to union_128_t")
		}
		new_buf_132 := bytes.NewBuffer(nil)
		old_buf_132_w := w
		w = new_buf_132
		if err := t.union126_.(*union_128_t).Locator.Write(w); err != nil {
			return fmt.Errorf("encode Locator: %w", err)
		}
		if new_buf_132.Len() != int(t.Length) {
			return fmt.Errorf("encode Locator: expect %d bytes but got %d bytes", new_buf_132.Len(), int(t.Length))
		}
		_, err = new_buf_132.WriteTo(old_buf_132_w)
		if err != nil {
			return err
		}
		w = old_buf_132_w
	default:
		if _, ok := t.union126_.(*union_129_t); !ok {
			return fmt.Errorf("encode t.union126_: union is not set to union_129_t")
		}
		len_Value := int(t.Length)
		if len(t.union126_.(*union_129_t).Value) != len_Value {
			return fmt.Errorf("encode Value: expect %d bytes but got %d bytes", len_Value, len(t.union126_.(*union_129_t).Value))
		}
		if n, err := w.Write(t.union126_.(*union_129_t).Value); err != nil || n != len(t.union126_.(*union_129_t).Value) {
			return fmt.Errorf("encode Value: %w", err)
		}
	}
	return nil
}
func (t *Srv6LocatorLsatlv) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 4))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *Srv6LocatorLsatlv) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *Srv6LocatorLsatlv) Read(r io.Reader) (err error) {
	tmpType := [2]byte{}
	n_Type, err := io.ReadFull(r, tmpType[:])
	if err != nil {
		return fmt.Errorf("read Type: expect 2 bytes but read %d bytes: %w", n_Type, err)
	}
	t.Type = Srv6LocatorLsatlvtype(binary.BigEndian.Uint16(tmpType[:]))
	tmpLength := [2]byte{}
	n_Length, err := io.ReadFull(r, tmpLength[:])
	if err != nil {
		return fmt.Errorf("read Length: expect 2 bytes but read %d bytes: %w", n_Length, err)
	}
	t.Length = uint16(binary.BigEndian.Uint16(tmpLength[:]))
	switch {
	case (t.Type == Srv6LocatorLsatlvtype_Locator):
		t.union126_ = &union_128_t{}
		sub_byte_len_Locator := int64(t.Length)
		sub_byte_r_Locator := io.LimitReader(r, int64(sub_byte_len_Locator))
		tmp_old_r_Locator_133 := r
		r = sub_byte_r_Locator
		if err := t.union126_.(*union_128_t).Locator.Read(r); err != nil {
			return fmt.Errorf("read Locator: %w", err)
		}
		if sub_byte_r_Locator.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read Locator: expect %d bytes but got %d bytes", sub_byte_len_Locator, sub_byte_len_Locator-sub_byte_r_Locator.(*io.LimitedReader).N)
		}
		r = tmp_old_r_Locator_133
	default:
		t.union126_ = &union_129_t{}
		len_Value := int(t.Length)
		if len_Value != 0 {
			tmpValue := make([]byte, len_Value)
			n_Value, err := io.ReadFull(r, tmpValue[:])
			if err != nil {
				return fmt.Errorf("read Value: expect %d bytes but read %d bytes: %w", len_Value, n_Value, err)
			}
			t.union126_.(*union_129_t).Value = tmpValue[:]
		} else {
			t.union126_.(*union_129_t).Value = nil
		}
	}
	return nil
}

func (t *Srv6LocatorLsatlv) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *Srv6LocatorLsatlv) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode Srv6LocatorLsatlv: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *Srv6LocatorLsa) Visit(v VisitorTIJJO) {
	v.Visit(v, "Tlvs", &t.Tlvs)
}
func (t *Srv6LocatorLsa) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *Srv6LocatorLsa) Write(w io.Writer) (err error) {
	for _, v := range t.Tlvs {
		if err := v.Write(w); err != nil {
			return fmt.Errorf("encode Tlvs: %w", err)
		}
	}
	return nil
}
func (t *Srv6LocatorLsa) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 0))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *Srv6LocatorLsa) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *Srv6LocatorLsa) Read(r io.Reader) (err error) {
	tmp_byte_scanner134_ := bufio.NewReaderSize(r, 1)
	old_r_Tlvs := r
	r = tmp_byte_scanner134_
	for {
		_, err := tmp_byte_scanner134_.ReadByte()
		if err != nil {
			if err != io.EOF {
				return fmt.Errorf("read Tlvs: %w", err)
			}
			break
		}
		if err := tmp_byte_scanner134_.UnreadByte(); err != nil {
			return fmt.Errorf("read Tlvs: unexpected unread error: %w", err)
		}
		var tmp135_ Srv6LocatorLsatlv
		if err := tmp135_.Read(r); err != nil {
			return fmt.Errorf("read Tlvs: %w", err)
		}
		t.Tlvs = append(t.Tlvs, tmp135_)
	}
	r = old_r_Tlvs
	return nil
}

func (t *Srv6LocatorLsa) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *Srv6LocatorLsa) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode Srv6LocatorLsa: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *union_138_t) isunion136_() {}
func (t *union_139_t) isunion136_() {}
func (t *union_140_t) isunion136_() {}
func (t *union_141_t) isunion136_() {}
func (t *union_142_t) isunion136_() {}
func (t *union_143_t) isunion136_() {}
func (t *union_144_t) isunion136_() {}
func (t *union_145_t) isunion136_() {}
func (t *union_146_t) isunion136_() {}
func (t *union_147_t) isunion136_() {}
func (t *Lsa) AsExternalLsa() *AsexternalLsa {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaPrefixLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaRouterLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_AsExternalLsa {
		if _, ok := t.union136_.(*union_142_t); !ok {
			return nil // not set
		}
		tmp := AsexternalLsa(t.union136_.(*union_142_t).AsExternalLsa)
		return &tmp
	}
	return nil
}
func (t *Lsa) SetAsExternalLsa(v AsexternalLsa) bool {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaPrefixLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaRouterLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_AsExternalLsa {
		if _, ok := t.union136_.(*union_142_t); !ok {
			t.union136_ = &union_142_t{}
		}
		t.union136_.(*union_142_t).AsExternalLsa = AsexternalLsa(v)
		return true
	}
	return false
}
func (t *Lsa) Data() *[]uint8 {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaPrefixLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaRouterLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_AsExternalLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_LinkLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_IntraAreaPrefixLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterInfoOpaqueLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_Srv6LocatorLsa {
		return nil
	} else if true {
		if _, ok := t.union136_.(*union_147_t); !ok {
			return nil // not set
		}
		tmp := []uint8(t.union136_.(*union_147_t).Data)
		return &tmp
	}
	return nil
}
func (t *Lsa) SetData(v []uint8) bool {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaPrefixLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaRouterLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_AsExternalLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_LinkLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_IntraAreaPrefixLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterInfoOpaqueLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_Srv6LocatorLsa {
		return false
	} else if true {
		if _, ok := t.union136_.(*union_147_t); !ok {
			t.union136_ = &union_147_t{}
		}
		t.union136_.(*union_147_t).Data = []uint8(v)
		return true
	}
	return false
}
func (t *Lsa) InterAreaPrefixLsa() *InterAreaPrefixLsa {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaPrefixLsa {
		if _, ok := t.union136_.(*union_140_t); !ok {
			return nil // not set
		}
		tmp := InterAreaPrefixLsa(t.union136_.(*union_140_t).InterAreaPrefixLsa)
		return &tmp
	}
	return nil
}
func (t *Lsa) SetInterAreaPrefixLsa(v InterAreaPrefixLsa) bool {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaPrefixLsa {
		if _, ok := t.union136_.(*union_140_t); !ok {
			t.union136_ = &union_140_t{}
		}
		t.union136_.(*union_140_t).InterAreaPrefixLsa = InterAreaPrefixLsa(v)
		return true
	}
	return false
}
func (t *Lsa) InterAreaRouterLsa() *InterAreaRouterLsa {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaPrefixLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaRouterLsa {
		if _, ok := t.union136_.(*union_141_t); !ok {
			return nil // not set
		}
		tmp := InterAreaRouterLsa(t.union136_.(*union_141_t).InterAreaRouterLsa)
		return &tmp
	}
	return nil
}
func (t *Lsa) SetInterAreaRouterLsa(v InterAreaRouterLsa) bool {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaPrefixLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaRouterLsa {
		if _, ok := t.union136_.(*union_141_t); !ok {
			t.union136_ = &union_141_t{}
		}
		t.union136_.(*union_141_t).InterAreaRouterLsa = InterAreaRouterLsa(v)
		return true
	}
	return false
}
func (t *Lsa) IntraAreaPrefixLsa() *IntraAreaPrefixLsa {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaPrefixLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaRouterLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_AsExternalLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_LinkLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_IntraAreaPrefixLsa {
		if _, ok := t.union136_.(*union_144_t); !ok {
			return nil // not set
		}
		tmp := IntraAreaPrefixLsa(t.union136_.(*union_144_t).IntraAreaPrefixLsa)
		return &tmp
	}
	return nil
}
func (t *Lsa) SetIntraAreaPrefixLsa(v IntraAreaPrefixLsa) bool {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaPrefixLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaRouterLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_AsExternalLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_LinkLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_IntraAreaPrefixLsa {
		if _, ok := t.union136_.(*union_144_t); !ok {
			t.union136_ = &union_144_t{}
		}
		t.union136_.(*union_144_t).IntraAreaPrefixLsa = IntraAreaPrefixLsa(v)
		return true
	}
	return false
}
func (t *Lsa) LinkLsa() *LinkLsa {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaPrefixLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaRouterLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_AsExternalLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_LinkLsa {
		if _, ok := t.union136_.(*union_143_t); !ok {
			return nil // not set
		}
		tmp := LinkLsa(t.union136_.(*union_143_t).LinkLsa)
		return &tmp
	}
	return nil
}
func (t *Lsa) SetLinkLsa(v LinkLsa) bool {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaPrefixLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaRouterLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_AsExternalLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_LinkLsa {
		if _, ok := t.union136_.(*union_143_t); !ok {
			t.union136_ = &union_143_t{}
		}
		t.union136_.(*union_143_t).LinkLsa = LinkLsa(v)
		return true
	}
	return false
}
func (t *Lsa) NetworkLsa() *NetworkLsa {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa {
		if _, ok := t.union136_.(*union_139_t); !ok {
			return nil // not set
		}
		tmp := NetworkLsa(t.union136_.(*union_139_t).NetworkLsa)
		return &tmp
	}
	return nil
}
func (t *Lsa) SetNetworkLsa(v NetworkLsa) bool {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa {
		if _, ok := t.union136_.(*union_139_t); !ok {
			t.union136_ = &union_139_t{}
		}
		t.union136_.(*union_139_t).NetworkLsa = NetworkLsa(v)
		return true
	}
	return false
}
func (t *Lsa) RouterInfoOpaqueLsa() *RouterInfoOpaqueLsa {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaPrefixLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaRouterLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_AsExternalLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_LinkLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_IntraAreaPrefixLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterInfoOpaqueLsa {
		if _, ok := t.union136_.(*union_145_t); !ok {
			return nil // not set
		}
		tmp := RouterInfoOpaqueLsa(t.union136_.(*union_145_t).RouterInfoOpaqueLsa)
		return &tmp
	}
	return nil
}
func (t *Lsa) SetRouterInfoOpaqueLsa(v RouterInfoOpaqueLsa) bool {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaPrefixLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaRouterLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_AsExternalLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_LinkLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_IntraAreaPrefixLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterInfoOpaqueLsa {
		if _, ok := t.union136_.(*union_145_t); !ok {
			t.union136_ = &union_145_t{}
		}
		t.union136_.(*union_145_t).RouterInfoOpaqueLsa = RouterInfoOpaqueLsa(v)
		return true
	}
	return false
}
func (t *Lsa) RouterLsa() *RouterLsa {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		if _, ok := t.union136_.(*union_138_t); !ok {
			return nil // not set
		}
		tmp := RouterLsa(t.union136_.(*union_138_t).RouterLsa)
		return &tmp
	}
	return nil
}
func (t *Lsa) SetRouterLsa(v RouterLsa) bool {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		if _, ok := t.union136_.(*union_138_t); !ok {
			t.union136_ = &union_138_t{}
		}
		t.union136_.(*union_138_t).RouterLsa = RouterLsa(v)
		return true
	}
	return false
}
func (t *Lsa) Srv6LocatorLsa() *Srv6LocatorLsa {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaPrefixLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaRouterLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_AsExternalLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_LinkLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_IntraAreaPrefixLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterInfoOpaqueLsa {
		return nil
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_Srv6LocatorLsa {
		if _, ok := t.union136_.(*union_146_t); !ok {
			return nil // not set
		}
		tmp := Srv6LocatorLsa(t.union136_.(*union_146_t).Srv6LocatorLsa)
		return &tmp
	}
	return nil
}
func (t *Lsa) SetSrv6LocatorLsa(v Srv6LocatorLsa) bool {
	if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaPrefixLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaRouterLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_AsExternalLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_LinkLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_IntraAreaPrefixLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterInfoOpaqueLsa {
		return false
	} else if t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_Srv6LocatorLsa {
		if _, ok := t.union136_.(*union_146_t); !ok {
			t.union136_ = &union_146_t{}
		}
		t.union136_.(*union_146_t).Srv6LocatorLsa = Srv6LocatorLsa(v)
		return true
	}
	return false
}
func (t *Lsa) Visit(v VisitorTIJJO) {
	v.Visit(v, "LsaHeader", &t.LsaHeader)
	v.Visit(v, "AsExternalLsa", (t.AsExternalLsa()))
	v.Visit(v, "Data", (t.Data()))
	v.Visit(v, "InterAreaPrefixLsa", (t.InterAreaPrefixLsa()))
	v.Visit(v, "InterAreaRouterLsa", (t.InterAreaRouterLsa()))
	v.Visit(v, "IntraAreaPrefixLsa", (t.IntraAreaPrefixLsa()))
	v.Visit(v, "LinkLsa", (t.LinkLsa()))
	v.Visit(v, "NetworkLsa", (t.NetworkLsa()))
	v.Visit(v, "RouterInfoOpaqueLsa", (t.RouterInfoOpaqueLsa()))
	v.Visit(v, "RouterLsa", (t.RouterLsa()))
	v.Visit(v, "Srv6LocatorLsa", (t.Srv6LocatorLsa()))
}
func (t *Lsa) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *Lsa) Write(w io.Writer) (err error) {
	if err := t.LsaHeader.Write(w); err != nil {
		return fmt.Errorf("encode LsaHeader: %w", err)
	}
	switch {
	case (t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa):
		if _, ok := t.union136_.(*union_138_t); !ok {
			return fmt.Errorf("encode t.union136_: union is not set to union_138_t")
		}
		new_buf_148 := bytes.NewBuffer(nil)
		old_buf_148_w := w
		w = new_buf_148
		if err := t.union136_.(*union_138_t).RouterLsa.Write(w); err != nil {
			return fmt.Errorf("encode RouterLsa: %w", err)
		}
		if new_buf_148.Len() != int((t.LsaHeader.HeaderChecksum.Length - 20)) {
			return fmt.Errorf("encode RouterLsa: expect %d bytes but got %d bytes", new_buf_148.Len(), int((t.LsaHeader.HeaderChecksum.Length - 20)))
		}
		_, err = new_buf_148.WriteTo(old_buf_148_w)
		if err != nil {
			return err
		}
		w = old_buf_148_w
	case (t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa):
		if _, ok := t.union136_.(*union_139_t); !ok {
			return fmt.Errorf("encode t.union136_: union is not set to union_139_t")
		}
		new_buf_149 := bytes.NewBuffer(nil)
		old_buf_149_w := w
		w = new_buf_149
		if err := t.union136_.(*union_139_t).NetworkLsa.Write(w); err != nil {
			return fmt.Errorf("encode NetworkLsa: %w", err)
		}
		if new_buf_149.Len() != int((t.LsaHeader.HeaderChecksum.Length - 20)) {
			return fmt.Errorf("encode NetworkLsa: expect %d bytes but got %d bytes", new_buf_149.Len(), int((t.LsaHeader.HeaderChecksum.Length - 20)))
		}
		_, err = new_buf_149.WriteTo(old_buf_149_w)
		if err != nil {
			return err
		}
		w = old_buf_149_w
	case (t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaPrefixLsa):
		if _, ok := t.union136_.(*union_140_t); !ok {
			return fmt.Errorf("encode t.union136_: union is not set to union_140_t")
		}
		new_buf_150 := bytes.NewBuffer(nil)
		old_buf_150_w := w
		w = new_buf_150
		if err := t.union136_.(*union_140_t).InterAreaPrefixLsa.Write(w); err != nil {
			return fmt.Errorf("encode InterAreaPrefixLsa: %w", err)
		}
		if new_buf_150.Len() != int((t.LsaHeader.HeaderChecksum.Length - 20)) {
			return fmt.Errorf("encode InterAreaPrefixLsa: expect %d bytes but got %d bytes", new_buf_150.Len(), int((t.LsaHeader.HeaderChecksum.Length - 20)))
		}
		_, err = new_buf_150.WriteTo(old_buf_150_w)
		if err != nil {
			return err
		}
		w = old_buf_150_w
	case (t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaRouterLsa):
		if _, ok := t.union136_.(*union_141_t); !ok {
			return fmt.Errorf("encode t.union136_: union is not set to union_141_t")
		}
		new_buf_151 := bytes.NewBuffer(nil)
		old_buf_151_w := w
		w = new_buf_151
		if err := t.union136_.(*union_141_t).InterAreaRouterLsa.Write(w); err != nil {
			return fmt.Errorf("encode InterAreaRouterLsa: %w", err)
		}
		if new_buf_151.Len() != int((t.LsaHeader.HeaderChecksum.Length - 20)) {
			return fmt.Errorf("encode InterAreaRouterLsa: expect %d bytes but got %d bytes", new_buf_151.Len(), int((t.LsaHeader.HeaderChecksum.Length - 20)))
		}
		_, err = new_buf_151.WriteTo(old_buf_151_w)
		if err != nil {
			return err
		}
		w = old_buf_151_w
	case (t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_AsExternalLsa):
		if _, ok := t.union136_.(*union_142_t); !ok {
			return fmt.Errorf("encode t.union136_: union is not set to union_142_t")
		}
		new_buf_152 := bytes.NewBuffer(nil)
		old_buf_152_w := w
		w = new_buf_152
		if err := t.union136_.(*union_142_t).AsExternalLsa.Write(w); err != nil {
			return fmt.Errorf("encode AsExternalLsa: %w", err)
		}
		if new_buf_152.Len() != int((t.LsaHeader.HeaderChecksum.Length - 20)) {
			return fmt.Errorf("encode AsExternalLsa: expect %d bytes but got %d bytes", new_buf_152.Len(), int((t.LsaHeader.HeaderChecksum.Length - 20)))
		}
		_, err = new_buf_152.WriteTo(old_buf_152_w)
		if err != nil {
			return err
		}
		w = old_buf_152_w
	case (t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_LinkLsa):
		if _, ok := t.union136_.(*union_143_t); !ok {
			return fmt.Errorf("encode t.union136_: union is not set to union_143_t")
		}
		new_buf_153 := bytes.NewBuffer(nil)
		old_buf_153_w := w
		w = new_buf_153
		if err := t.union136_.(*union_143_t).LinkLsa.Write(w); err != nil {
			return fmt.Errorf("encode LinkLsa: %w", err)
		}
		if new_buf_153.Len() != int((t.LsaHeader.HeaderChecksum.Length - 20)) {
			return fmt.Errorf("encode LinkLsa: expect %d bytes but got %d bytes", new_buf_153.Len(), int((t.LsaHeader.HeaderChecksum.Length - 20)))
		}
		_, err = new_buf_153.WriteTo(old_buf_153_w)
		if err != nil {
			return err
		}
		w = old_buf_153_w
	case (t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_IntraAreaPrefixLsa):
		if _, ok := t.union136_.(*union_144_t); !ok {
			return fmt.Errorf("encode t.union136_: union is not set to union_144_t")
		}
		new_buf_154 := bytes.NewBuffer(nil)
		old_buf_154_w := w
		w = new_buf_154
		if err := t.union136_.(*union_144_t).IntraAreaPrefixLsa.Write(w); err != nil {
			return fmt.Errorf("encode IntraAreaPrefixLsa: %w", err)
		}
		if new_buf_154.Len() != int((t.LsaHeader.HeaderChecksum.Length - 20)) {
			return fmt.Errorf("encode IntraAreaPrefixLsa: expect %d bytes but got %d bytes", new_buf_154.Len(), int((t.LsaHeader.HeaderChecksum.Length - 20)))
		}
		_, err = new_buf_154.WriteTo(old_buf_154_w)
		if err != nil {
			return err
		}
		w = old_buf_154_w
	case (t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterInfoOpaqueLsa):
		if _, ok := t.union136_.(*union_145_t); !ok {
			return fmt.Errorf("encode t.union136_: union is not set to union_145_t")
		}
		new_buf_155 := bytes.NewBuffer(nil)
		old_buf_155_w := w
		w = new_buf_155
		if err := t.union136_.(*union_145_t).RouterInfoOpaqueLsa.Write(w); err != nil {
			return fmt.Errorf("encode RouterInfoOpaqueLsa: %w", err)
		}
		if new_buf_155.Len() != int((t.LsaHeader.HeaderChecksum.Length - 20)) {
			return fmt.Errorf("encode RouterInfoOpaqueLsa: expect %d bytes but got %d bytes", new_buf_155.Len(), int((t.LsaHeader.HeaderChecksum.Length - 20)))
		}
		_, err = new_buf_155.WriteTo(old_buf_155_w)
		if err != nil {
			return err
		}
		w = old_buf_155_w
	case (t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_Srv6LocatorLsa):
		if _, ok := t.union136_.(*union_146_t); !ok {
			return fmt.Errorf("encode t.union136_: union is not set to union_146_t")
		}
		new_buf_156 := bytes.NewBuffer(nil)
		old_buf_156_w := w
		w = new_buf_156
		if err := t.union136_.(*union_146_t).Srv6LocatorLsa.Write(w); err != nil {
			return fmt.Errorf("encode Srv6LocatorLsa: %w", err)
		}
		if new_buf_156.Len() != int((t.LsaHeader.HeaderChecksum.Length - 20)) {
			return fmt.Errorf("encode Srv6LocatorLsa: expect %d bytes but got %d bytes", new_buf_156.Len(), int((t.LsaHeader.HeaderChecksum.Length - 20)))
		}
		_, err = new_buf_156.WriteTo(old_buf_156_w)
		if err != nil {
			return err
		}
		w = old_buf_156_w
	default:
		if _, ok := t.union136_.(*union_147_t); !ok {
			return fmt.Errorf("encode t.union136_: union is not set to union_147_t")
		}
		len_Data := int((t.LsaHeader.HeaderChecksum.Length - 20))
		if len(t.union136_.(*union_147_t).Data) != len_Data {
			return fmt.Errorf("encode Data: expect %d bytes but got %d bytes", len_Data, len(t.union136_.(*union_147_t).Data))
		}
		if n, err := w.Write(t.union136_.(*union_147_t).Data); err != nil || n != len(t.union136_.(*union_147_t).Data) {
			return fmt.Errorf("encode Data: %w", err)
		}
	}
	return nil
}
func (t *Lsa) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 20))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *Lsa) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *Lsa) Read(r io.Reader) (err error) {
	if err := t.LsaHeader.Read(r); err != nil {
		return fmt.Errorf("read LsaHeader: %w", err)
	}
	switch {
	case (t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterLsa):
		t.union136_ = &union_138_t{}
		sub_byte_len_RouterLsa := int64((t.LsaHeader.HeaderChecksum.Length - 20))
		sub_byte_r_RouterLsa := io.LimitReader(r, int64(sub_byte_len_RouterLsa))
		tmp_old_r_RouterLsa_157 := r
		r = sub_byte_r_RouterLsa
		if err := t.union136_.(*union_138_t).RouterLsa.Read(r); err != nil {
			return fmt.Errorf("read RouterLsa: %w", err)
		}
		if sub_byte_r_RouterLsa.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read RouterLsa: expect %d bytes but got %d bytes", sub_byte_len_RouterLsa, sub_byte_len_RouterLsa-sub_byte_r_RouterLsa.(*io.LimitedReader).N)
		}
		r = tmp_old_r_RouterLsa_157
	case (t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_NetworkLsa):
		t.union136_ = &union_139_t{}
		sub_byte_len_NetworkLsa := int64((t.LsaHeader.HeaderChecksum.Length - 20))
		sub_byte_r_NetworkLsa := io.LimitReader(r, int64(sub_byte_len_NetworkLsa))
		tmp_old_r_NetworkLsa_158 := r
		r = sub_byte_r_NetworkLsa
		if err := t.union136_.(*union_139_t).NetworkLsa.Read(r); err != nil {
			return fmt.Errorf("read NetworkLsa: %w", err)
		}
		if sub_byte_r_NetworkLsa.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read NetworkLsa: expect %d bytes but got %d bytes", sub_byte_len_NetworkLsa, sub_byte_len_NetworkLsa-sub_byte_r_NetworkLsa.(*io.LimitedReader).N)
		}
		r = tmp_old_r_NetworkLsa_158
	case (t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaPrefixLsa):
		t.union136_ = &union_140_t{}
		sub_byte_len_InterAreaPrefixLsa := int64((t.LsaHeader.HeaderChecksum.Length - 20))
		sub_byte_r_InterAreaPrefixLsa := io.LimitReader(r, int64(sub_byte_len_InterAreaPrefixLsa))
		tmp_old_r_InterAreaPrefixLsa_159 := r
		r = sub_byte_r_InterAreaPrefixLsa
		if err := t.union136_.(*union_140_t).InterAreaPrefixLsa.Read(r); err != nil {
			return fmt.Errorf("read InterAreaPrefixLsa: %w", err)
		}
		if sub_byte_r_InterAreaPrefixLsa.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read InterAreaPrefixLsa: expect %d bytes but got %d bytes", sub_byte_len_InterAreaPrefixLsa, sub_byte_len_InterAreaPrefixLsa-sub_byte_r_InterAreaPrefixLsa.(*io.LimitedReader).N)
		}
		r = tmp_old_r_InterAreaPrefixLsa_159
	case (t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_InterAreaRouterLsa):
		t.union136_ = &union_141_t{}
		sub_byte_len_InterAreaRouterLsa := int64((t.LsaHeader.HeaderChecksum.Length - 20))
		sub_byte_r_InterAreaRouterLsa := io.LimitReader(r, int64(sub_byte_len_InterAreaRouterLsa))
		tmp_old_r_InterAreaRouterLsa_160 := r
		r = sub_byte_r_InterAreaRouterLsa
		if err := t.union136_.(*union_141_t).InterAreaRouterLsa.Read(r); err != nil {
			return fmt.Errorf("read InterAreaRouterLsa: %w", err)
		}
		if sub_byte_r_InterAreaRouterLsa.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read InterAreaRouterLsa: expect %d bytes but got %d bytes", sub_byte_len_InterAreaRouterLsa, sub_byte_len_InterAreaRouterLsa-sub_byte_r_InterAreaRouterLsa.(*io.LimitedReader).N)
		}
		r = tmp_old_r_InterAreaRouterLsa_160
	case (t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_AsExternalLsa):
		t.union136_ = &union_142_t{}
		sub_byte_len_AsExternalLsa := int64((t.LsaHeader.HeaderChecksum.Length - 20))
		sub_byte_r_AsExternalLsa := io.LimitReader(r, int64(sub_byte_len_AsExternalLsa))
		tmp_old_r_AsExternalLsa_161 := r
		r = sub_byte_r_AsExternalLsa
		if err := t.union136_.(*union_142_t).AsExternalLsa.Read(r); err != nil {
			return fmt.Errorf("read AsExternalLsa: %w", err)
		}
		if sub_byte_r_AsExternalLsa.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read AsExternalLsa: expect %d bytes but got %d bytes", sub_byte_len_AsExternalLsa, sub_byte_len_AsExternalLsa-sub_byte_r_AsExternalLsa.(*io.LimitedReader).N)
		}
		r = tmp_old_r_AsExternalLsa_161
	case (t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_LinkLsa):
		t.union136_ = &union_143_t{}
		sub_byte_len_LinkLsa := int64((t.LsaHeader.HeaderChecksum.Length - 20))
		sub_byte_r_LinkLsa := io.LimitReader(r, int64(sub_byte_len_LinkLsa))
		tmp_old_r_LinkLsa_162 := r
		r = sub_byte_r_LinkLsa
		if err := t.union136_.(*union_143_t).LinkLsa.Read(r); err != nil {
			return fmt.Errorf("read LinkLsa: %w", err)
		}
		if sub_byte_r_LinkLsa.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read LinkLsa: expect %d bytes but got %d bytes", sub_byte_len_LinkLsa, sub_byte_len_LinkLsa-sub_byte_r_LinkLsa.(*io.LimitedReader).N)
		}
		r = tmp_old_r_LinkLsa_162
	case (t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_IntraAreaPrefixLsa):
		t.union136_ = &union_144_t{}
		sub_byte_len_IntraAreaPrefixLsa := int64((t.LsaHeader.HeaderChecksum.Length - 20))
		sub_byte_r_IntraAreaPrefixLsa := io.LimitReader(r, int64(sub_byte_len_IntraAreaPrefixLsa))
		tmp_old_r_IntraAreaPrefixLsa_163 := r
		r = sub_byte_r_IntraAreaPrefixLsa
		if err := t.union136_.(*union_144_t).IntraAreaPrefixLsa.Read(r); err != nil {
			return fmt.Errorf("read IntraAreaPrefixLsa: %w", err)
		}
		if sub_byte_r_IntraAreaPrefixLsa.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read IntraAreaPrefixLsa: expect %d bytes but got %d bytes", sub_byte_len_IntraAreaPrefixLsa, sub_byte_len_IntraAreaPrefixLsa-sub_byte_r_IntraAreaPrefixLsa.(*io.LimitedReader).N)
		}
		r = tmp_old_r_IntraAreaPrefixLsa_163
	case (t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_RouterInfoOpaqueLsa):
		t.union136_ = &union_145_t{}
		sub_byte_len_RouterInfoOpaqueLsa := int64((t.LsaHeader.HeaderChecksum.Length - 20))
		sub_byte_r_RouterInfoOpaqueLsa := io.LimitReader(r, int64(sub_byte_len_RouterInfoOpaqueLsa))
		tmp_old_r_RouterInfoOpaqueLsa_164 := r
		r = sub_byte_r_RouterInfoOpaqueLsa
		if err := t.union136_.(*union_145_t).RouterInfoOpaqueLsa.Read(r); err != nil {
			return fmt.Errorf("read RouterInfoOpaqueLsa: %w", err)
		}
		if sub_byte_r_RouterInfoOpaqueLsa.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read RouterInfoOpaqueLsa: expect %d bytes but got %d bytes", sub_byte_len_RouterInfoOpaqueLsa, sub_byte_len_RouterInfoOpaqueLsa-sub_byte_r_RouterInfoOpaqueLsa.(*io.LimitedReader).N)
		}
		r = tmp_old_r_RouterInfoOpaqueLsa_164
	case (t.LsaHeader.HeaderChecksum.LsType.Code() == LsafunctionCode_Srv6LocatorLsa):
		t.union136_ = &union_146_t{}
		sub_byte_len_Srv6LocatorLsa := int64((t.LsaHeader.HeaderChecksum.Length - 20))
		sub_byte_r_Srv6LocatorLsa := io.LimitReader(r, int64(sub_byte_len_Srv6LocatorLsa))
		tmp_old_r_Srv6LocatorLsa_165 := r
		r = sub_byte_r_Srv6LocatorLsa
		if err := t.union136_.(*union_146_t).Srv6LocatorLsa.Read(r); err != nil {
			return fmt.Errorf("read Srv6LocatorLsa: %w", err)
		}
		if sub_byte_r_Srv6LocatorLsa.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read Srv6LocatorLsa: expect %d bytes but got %d bytes", sub_byte_len_Srv6LocatorLsa, sub_byte_len_Srv6LocatorLsa-sub_byte_r_Srv6LocatorLsa.(*io.LimitedReader).N)
		}
		r = tmp_old_r_Srv6LocatorLsa_165
	default:
		t.union136_ = &union_147_t{}
		len_Data := int((t.LsaHeader.HeaderChecksum.Length - 20))
		if len_Data != 0 {
			tmpData := make([]byte, len_Data)
			n_Data, err := io.ReadFull(r, tmpData[:])
			if err != nil {
				return fmt.Errorf("read Data: expect %d bytes but read %d bytes: %w", len_Data, n_Data, err)
			}
			t.union136_.(*union_147_t).Data = tmpData[:]
		} else {
			t.union136_.(*union_147_t).Data = nil
		}
	}
	return nil
}

func (t *Lsa) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *Lsa) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode Lsa: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *OspflinkStateUpdatePacket) SetLsaHeaders(v []Lsa) bool {
	if len(v) > int(^uint32(0)) {
		return false
	}
	t.NumLsa = uint32(len(v))
	t.LsaHeaders = v
	return true
}
func (t *OspflinkStateUpdatePacket) Visit(v VisitorTIJJO) {
	v.Visit(v, "NumLsa", &t.NumLsa)
	v.Visit(v, "LsaHeaders", &t.LsaHeaders)
}
func (t *OspflinkStateUpdatePacket) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *OspflinkStateUpdatePacket) Write(w io.Writer) (err error) {
	tmp166 := [4]byte{}
	binary.BigEndian.PutUint32(tmp166[:], uint32(t.NumLsa))
	if n, err := w.Write(tmp166[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.NumLsa: %w", err)
	}
	len_LsaHeaders := int(t.NumLsa)
	if len(t.LsaHeaders) != len_LsaHeaders {
		return fmt.Errorf("encode LsaHeaders: expect %d but got %d for length", len_LsaHeaders, len(t.LsaHeaders))
	}
	for _, v := range t.LsaHeaders {
		if err := v.Write(w); err != nil {
			return fmt.Errorf("encode LsaHeaders: %w", err)
		}
	}
	return nil
}
func (t *OspflinkStateUpdatePacket) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 4))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *OspflinkStateUpdatePacket) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *OspflinkStateUpdatePacket) Read(r io.Reader) (err error) {
	tmpNumLsa := [4]byte{}
	n_NumLsa, err := io.ReadFull(r, tmpNumLsa[:])
	if err != nil {
		return fmt.Errorf("read NumLsa: expect 4 bytes but read %d bytes: %w", n_NumLsa, err)
	}
	t.NumLsa = uint32(binary.BigEndian.Uint32(tmpNumLsa[:]))
	len_LsaHeaders := int(t.NumLsa)
	for i_167 := 0; i_167 < len_LsaHeaders; i_167++ {
		var tmp168_ Lsa
		if err := tmp168_.Read(r); err != nil {
			return fmt.Errorf("read LsaHeaders: %w", err)
		}
		t.LsaHeaders = append(t.LsaHeaders, tmp168_)
	}
	return nil
}

func (t *OspflinkStateUpdatePacket) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *OspflinkStateUpdatePacket) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode OspflinkStateUpdatePacket: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *OspflinkStateAcknowledgementPacket) Visit(v VisitorTIJJO) {
	v.Visit(v, "LsaHeaders", &t.LsaHeaders)
}
func (t *OspflinkStateAcknowledgementPacket) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *OspflinkStateAcknowledgementPacket) Write(w io.Writer) (err error) {
	for _, v := range t.LsaHeaders {
		if err := v.Write(w); err != nil {
			return fmt.Errorf("encode LsaHeaders: %w", err)
		}
	}
	return nil
}
func (t *OspflinkStateAcknowledgementPacket) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 0))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *OspflinkStateAcknowledgementPacket) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *OspflinkStateAcknowledgementPacket) Read(r io.Reader) (err error) {
	tmp_byte_scanner169_ := bufio.NewReaderSize(r, 1)
	old_r_LsaHeaders := r
	r = tmp_byte_scanner169_
	for {
		_, err := tmp_byte_scanner169_.ReadByte()
		if err != nil {
			if err != io.EOF {
				return fmt.Errorf("read LsaHeaders: %w", err)
			}
			break
		}
		if err := tmp_byte_scanner169_.UnreadByte(); err != nil {
			return fmt.Errorf("read LsaHeaders: unexpected unread error: %w", err)
		}
		var tmp170_ Lsaheader
		if err := tmp170_.Read(r); err != nil {
			return fmt.Errorf("read LsaHeaders: %w", err)
		}
		t.LsaHeaders = append(t.LsaHeaders, tmp170_)
	}
	r = old_r_LsaHeaders
	return nil
}

func (t *OspflinkStateAcknowledgementPacket) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *OspflinkStateAcknowledgementPacket) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode OspflinkStateAcknowledgementPacket: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *Srv6EndXsidsubTlv) Visit(v VisitorTIJJO) {
	v.Visit(v, "Behavior", &t.Behavior)
	v.Visit(v, "Flags", &t.Flags)
	v.Visit(v, "Reserved", &t.Reserved)
	v.Visit(v, "Algorithm", &t.Algorithm)
	v.Visit(v, "Weight", &t.Weight)
	v.Visit(v, "Reserved2", &t.Reserved2)
	v.Visit(v, "Sid", &t.Sid)
	v.Visit(v, "SubTlvs", &t.SubTlvs)
}
func (t *Srv6EndXsidsubTlv) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *Srv6EndXsidsubTlv) Write(w io.Writer) (err error) {
	tmp171 := [2]byte{}
	binary.BigEndian.PutUint16(tmp171[:], uint16(t.Behavior))
	if n, err := w.Write(tmp171[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Behavior: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Flags)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Flags: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Reserved)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Reserved: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Algorithm)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Algorithm: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Weight)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Weight: %w", err)
	}
	tmp172 := [2]byte{}
	binary.BigEndian.PutUint16(tmp172[:], uint16(t.Reserved2))
	if n, err := w.Write(tmp172[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Reserved2: %w", err)
	}
	if n, err := w.Write(t.Sid[:]); err != nil || n != len(t.Sid) {
		return fmt.Errorf("encode Sid: %w", err)
	}
	for _, v := range t.SubTlvs {
		if err := v.Write(w); err != nil {
			return fmt.Errorf("encode SubTlvs: %w", err)
		}
	}
	return nil
}
func (t *Srv6EndXsidsubTlv) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 24))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *Srv6EndXsidsubTlv) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *Srv6EndXsidsubTlv) Read(r io.Reader) (err error) {
	tmpBehavior := [2]byte{}
	n_Behavior, err := io.ReadFull(r, tmpBehavior[:])
	if err != nil {
		return fmt.Errorf("read Behavior: expect 2 bytes but read %d bytes: %w", n_Behavior, err)
	}
	t.Behavior = EndpointBehavior(binary.BigEndian.Uint16(tmpBehavior[:]))
	tmpFlags := [1]byte{}
	n_Flags, err := io.ReadFull(r, tmpFlags[:])
	if err != nil {
		return fmt.Errorf("read Flags: expect 1 byte but read %d bytes: %w", n_Flags, err)
	}
	t.Flags = uint8(tmpFlags[0])
	tmpReserved := [1]byte{}
	n_Reserved, err := io.ReadFull(r, tmpReserved[:])
	if err != nil {
		return fmt.Errorf("read Reserved: expect 1 byte but read %d bytes: %w", n_Reserved, err)
	}
	t.Reserved = uint8(tmpReserved[0])
	tmpAlgorithm := [1]byte{}
	n_Algorithm, err := io.ReadFull(r, tmpAlgorithm[:])
	if err != nil {
		return fmt.Errorf("read Algorithm: expect 1 byte but read %d bytes: %w", n_Algorithm, err)
	}
	t.Algorithm = uint8(tmpAlgorithm[0])
	tmpWeight := [1]byte{}
	n_Weight, err := io.ReadFull(r, tmpWeight[:])
	if err != nil {
		return fmt.Errorf("read Weight: expect 1 byte but read %d bytes: %w", n_Weight, err)
	}
	t.Weight = uint8(tmpWeight[0])
	tmpReserved2 := [2]byte{}
	n_Reserved2, err := io.ReadFull(r, tmpReserved2[:])
	if err != nil {
		return fmt.Errorf("read Reserved2: expect 2 bytes but read %d bytes: %w", n_Reserved2, err)
	}
	t.Reserved2 = uint16(binary.BigEndian.Uint16(tmpReserved2[:]))
	n_Sid, err := io.ReadFull(r, t.Sid[:])
	if err != nil {
		return fmt.Errorf("read Sid: expect %d bytes but read %d bytes: %w", 16, n_Sid, err)
	}
	tmp_byte_scanner173_ := bufio.NewReaderSize(r, 1)
	old_r_SubTlvs := r
	r = tmp_byte_scanner173_
	for {
		_, err := tmp_byte_scanner173_.ReadByte()
		if err != nil {
			if err != io.EOF {
				return fmt.Errorf("read SubTlvs: %w", err)
			}
			break
		}
		if err := tmp_byte_scanner173_.UnreadByte(); err != nil {
			return fmt.Errorf("read SubTlvs: unexpected unread error: %w", err)
		}
		var tmp174_ Srv6EndXsidsubTlvsubTlv
		if err := tmp174_.Read(r); err != nil {
			return fmt.Errorf("read SubTlvs: %w", err)
		}
		t.SubTlvs = append(t.SubTlvs, tmp174_)
	}
	r = old_r_SubTlvs
	return nil
}

func (t *Srv6EndXsidsubTlv) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *Srv6EndXsidsubTlv) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode Srv6EndXsidsubTlv: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *Srv6LanEndXsidsubTlv) Visit(v VisitorTIJJO) {
	v.Visit(v, "Behavior", &t.Behavior)
	v.Visit(v, "Flags", &t.Flags)
	v.Visit(v, "Reserved", &t.Reserved)
	v.Visit(v, "Algorithm", &t.Algorithm)
	v.Visit(v, "Weight", &t.Weight)
	v.Visit(v, "Reserved2", &t.Reserved2)
	v.Visit(v, "NeighborRouterId", &t.NeighborRouterId)
	v.Visit(v, "Sid", &t.Sid)
	v.Visit(v, "SubTlvs", &t.SubTlvs)
}
func (t *Srv6LanEndXsidsubTlv) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *Srv6LanEndXsidsubTlv) Write(w io.Writer) (err error) {
	tmp175 := [2]byte{}
	binary.BigEndian.PutUint16(tmp175[:], uint16(t.Behavior))
	if n, err := w.Write(tmp175[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Behavior: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Flags)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Flags: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Reserved)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Reserved: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Algorithm)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Algorithm: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Weight)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Weight: %w", err)
	}
	tmp176 := [2]byte{}
	binary.BigEndian.PutUint16(tmp176[:], uint16(t.Reserved2))
	if n, err := w.Write(tmp176[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.Reserved2: %w", err)
	}
	tmp177 := [4]byte{}
	binary.BigEndian.PutUint32(tmp177[:], uint32(t.NeighborRouterId))
	if n, err := w.Write(tmp177[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.NeighborRouterId: %w", err)
	}
	if n, err := w.Write(t.Sid[:]); err != nil || n != len(t.Sid) {
		return fmt.Errorf("encode Sid: %w", err)
	}
	for _, v := range t.SubTlvs {
		if err := v.Write(w); err != nil {
			return fmt.Errorf("encode SubTlvs: %w", err)
		}
	}
	return nil
}
func (t *Srv6LanEndXsidsubTlv) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 28))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *Srv6LanEndXsidsubTlv) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *Srv6LanEndXsidsubTlv) Read(r io.Reader) (err error) {
	tmpBehavior := [2]byte{}
	n_Behavior, err := io.ReadFull(r, tmpBehavior[:])
	if err != nil {
		return fmt.Errorf("read Behavior: expect 2 bytes but read %d bytes: %w", n_Behavior, err)
	}
	t.Behavior = EndpointBehavior(binary.BigEndian.Uint16(tmpBehavior[:]))
	tmpFlags := [1]byte{}
	n_Flags, err := io.ReadFull(r, tmpFlags[:])
	if err != nil {
		return fmt.Errorf("read Flags: expect 1 byte but read %d bytes: %w", n_Flags, err)
	}
	t.Flags = uint8(tmpFlags[0])
	tmpReserved := [1]byte{}
	n_Reserved, err := io.ReadFull(r, tmpReserved[:])
	if err != nil {
		return fmt.Errorf("read Reserved: expect 1 byte but read %d bytes: %w", n_Reserved, err)
	}
	t.Reserved = uint8(tmpReserved[0])
	tmpAlgorithm := [1]byte{}
	n_Algorithm, err := io.ReadFull(r, tmpAlgorithm[:])
	if err != nil {
		return fmt.Errorf("read Algorithm: expect 1 byte but read %d bytes: %w", n_Algorithm, err)
	}
	t.Algorithm = uint8(tmpAlgorithm[0])
	tmpWeight := [1]byte{}
	n_Weight, err := io.ReadFull(r, tmpWeight[:])
	if err != nil {
		return fmt.Errorf("read Weight: expect 1 byte but read %d bytes: %w", n_Weight, err)
	}
	t.Weight = uint8(tmpWeight[0])
	tmpReserved2 := [2]byte{}
	n_Reserved2, err := io.ReadFull(r, tmpReserved2[:])
	if err != nil {
		return fmt.Errorf("read Reserved2: expect 2 bytes but read %d bytes: %w", n_Reserved2, err)
	}
	t.Reserved2 = uint16(binary.BigEndian.Uint16(tmpReserved2[:]))
	tmpNeighborRouterId := [4]byte{}
	n_NeighborRouterId, err := io.ReadFull(r, tmpNeighborRouterId[:])
	if err != nil {
		return fmt.Errorf("read NeighborRouterId: expect 4 bytes but read %d bytes: %w", n_NeighborRouterId, err)
	}
	t.NeighborRouterId = uint32(binary.BigEndian.Uint32(tmpNeighborRouterId[:]))
	n_Sid, err := io.ReadFull(r, t.Sid[:])
	if err != nil {
		return fmt.Errorf("read Sid: expect %d bytes but read %d bytes: %w", 16, n_Sid, err)
	}
	tmp_byte_scanner178_ := bufio.NewReaderSize(r, 1)
	old_r_SubTlvs := r
	r = tmp_byte_scanner178_
	for {
		_, err := tmp_byte_scanner178_.ReadByte()
		if err != nil {
			if err != io.EOF {
				return fmt.Errorf("read SubTlvs: %w", err)
			}
			break
		}
		if err := tmp_byte_scanner178_.UnreadByte(); err != nil {
			return fmt.Errorf("read SubTlvs: unexpected unread error: %w", err)
		}
		var tmp179_ Srv6LanEndXsidsubTlvsubTlv
		if err := tmp179_.Read(r); err != nil {
			return fmt.Errorf("read SubTlvs: %w", err)
		}
		t.SubTlvs = append(t.SubTlvs, tmp179_)
	}
	r = old_r_SubTlvs
	return nil
}

func (t *Srv6LanEndXsidsubTlv) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *Srv6LanEndXsidsubTlv) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode Srv6LanEndXsidsubTlv: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *DatabaseDescriptionPacket) Reserved3() uint8 {
	return ((t.flags180 & 0xf8) >> 3)
}
func (t *DatabaseDescriptionPacket) SetReserved3(v uint8) bool {
	if v > 31 {
		return false
	}
	t.flags180 = (t.flags180 & ^uint8(0xf8)) | ((v & 0x1f) << 3)
	return true
}
func (t *DatabaseDescriptionPacket) Init() bool {
	return ((t.flags180 & 0x04) >> 2) == 1
}
func (t *DatabaseDescriptionPacket) SetInit(v bool) {
	if v {
		t.flags180 |= uint8(0x4)
	} else {
		t.flags180 &= ^uint8(0x4)
	}
}
func (t *DatabaseDescriptionPacket) More() bool {
	return ((t.flags180 & 0x02) >> 1) == 1
}
func (t *DatabaseDescriptionPacket) SetMore(v bool) {
	if v {
		t.flags180 |= uint8(0x2)
	} else {
		t.flags180 &= ^uint8(0x2)
	}
}
func (t *DatabaseDescriptionPacket) Master() bool {
	return ((t.flags180 & 0x01) >> 0) == 1
}
func (t *DatabaseDescriptionPacket) SetMaster(v bool) {
	if v {
		t.flags180 |= uint8(0x1)
	} else {
		t.flags180 &= ^uint8(0x1)
	}
}
func (t *DatabaseDescriptionPacket) Visit(v VisitorTIJJO) {
	v.Visit(v, "Reserved", &t.Reserved)
	v.Visit(v, "Options", &t.Options)
	v.Visit(v, "InterfaceMtu", &t.InterfaceMtu)
	v.Visit(v, "Reserved2", &t.Reserved2)
	v.Visit(v, "Reserved3", t.Reserved3())
	v.Visit(v, "Init", (func() uint8 {
		if t.Init() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "More", (func() uint8 {
		if t.More() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "Master", (func() uint8 {
		if t.Master() {
			return 1
		} else {
			return 0
		}
	}()))
	v.Visit(v, "DdSequenceNumber", &t.DdSequenceNumber)
	v.Visit(v, "LsaHeaders", &t.LsaHeaders)
}
func (t *DatabaseDescriptionPacket) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *DatabaseDescriptionPacket) Write(w io.Writer) (err error) {
	if n, err := w.Write([]byte{byte(t.Reserved)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Reserved: %w", err)
	}
	if err := t.Options.Write(w); err != nil {
		return fmt.Errorf("encode Options: %w", err)
	}
	tmp181 := [2]byte{}
	binary.BigEndian.PutUint16(tmp181[:], uint16(t.InterfaceMtu))
	if n, err := w.Write(tmp181[:]); err != nil || n != 2 {
		return fmt.Errorf("encode t.InterfaceMtu: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.Reserved2)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.Reserved2: %w", err)
	}
	if n, err := w.Write([]byte{byte(t.flags180)}); err != nil || n != 1 {
		return fmt.Errorf("encode t.flags180: %w", err)
	}
	tmp182 := [4]byte{}
	binary.BigEndian.PutUint32(tmp182[:], uint32(t.DdSequenceNumber))
	if n, err := w.Write(tmp182[:]); err != nil || n != 4 {
		return fmt.Errorf("encode t.DdSequenceNumber: %w", err)
	}
	for _, v := range t.LsaHeaders {
		if err := v.Write(w); err != nil {
			return fmt.Errorf("encode LsaHeaders: %w", err)
		}
	}
	return nil
}
func (t *DatabaseDescriptionPacket) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 12))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *DatabaseDescriptionPacket) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *DatabaseDescriptionPacket) Read(r io.Reader) (err error) {
	tmpReserved := [1]byte{}
	n_Reserved, err := io.ReadFull(r, tmpReserved[:])
	if err != nil {
		return fmt.Errorf("read Reserved: expect 1 byte but read %d bytes: %w", n_Reserved, err)
	}
	t.Reserved = uint8(tmpReserved[0])
	if err := t.Options.Read(r); err != nil {
		return fmt.Errorf("read Options: %w", err)
	}
	tmpInterfaceMtu := [2]byte{}
	n_InterfaceMtu, err := io.ReadFull(r, tmpInterfaceMtu[:])
	if err != nil {
		return fmt.Errorf("read InterfaceMtu: expect 2 bytes but read %d bytes: %w", n_InterfaceMtu, err)
	}
	t.InterfaceMtu = uint16(binary.BigEndian.Uint16(tmpInterfaceMtu[:]))
	tmpReserved2 := [1]byte{}
	n_Reserved2, err := io.ReadFull(r, tmpReserved2[:])
	if err != nil {
		return fmt.Errorf("read Reserved2: expect 1 byte but read %d bytes: %w", n_Reserved2, err)
	}
	t.Reserved2 = uint8(tmpReserved2[0])
	tmpflags180 := [1]byte{}
	n_flags180, err := io.ReadFull(r, tmpflags180[:])
	if err != nil {
		return fmt.Errorf("read flags180: expect 1 byte but read %d bytes: %w", n_flags180, err)
	}
	t.flags180 = uint8(tmpflags180[0])
	tmpDdSequenceNumber := [4]byte{}
	n_DdSequenceNumber, err := io.ReadFull(r, tmpDdSequenceNumber[:])
	if err != nil {
		return fmt.Errorf("read DdSequenceNumber: expect 4 bytes but read %d bytes: %w", n_DdSequenceNumber, err)
	}
	t.DdSequenceNumber = uint32(binary.BigEndian.Uint32(tmpDdSequenceNumber[:]))
	tmp_byte_scanner183_ := bufio.NewReaderSize(r, 1)
	old_r_LsaHeaders := r
	r = tmp_byte_scanner183_
	for {
		_, err := tmp_byte_scanner183_.ReadByte()
		if err != nil {
			if err != io.EOF {
				return fmt.Errorf("read LsaHeaders: %w", err)
			}
			break
		}
		if err := tmp_byte_scanner183_.UnreadByte(); err != nil {
			return fmt.Errorf("read LsaHeaders: unexpected unread error: %w", err)
		}
		var tmp184_ Lsaheader
		if err := tmp184_.Read(r); err != nil {
			return fmt.Errorf("read LsaHeaders: %w", err)
		}
		t.LsaHeaders = append(t.LsaHeaders, tmp184_)
	}
	r = old_r_LsaHeaders
	return nil
}

func (t *DatabaseDescriptionPacket) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *DatabaseDescriptionPacket) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode DatabaseDescriptionPacket: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
func (t *union_187_t) isunion185_() {}
func (t *union_188_t) isunion185_() {}
func (t *union_189_t) isunion185_() {}
func (t *union_190_t) isunion185_() {}
func (t *union_191_t) isunion185_() {}
func (t *union_192_t) isunion185_() {}
func (t *Ospfpacket) Data() *[]uint8 {
	if t.Header.Type == OspfpacketType_Hello {
		return nil
	} else if t.Header.Type == OspfpacketType_DatabaseDescription {
		return nil
	} else if t.Header.Type == OspfpacketType_LinkStateRequest {
		return nil
	} else if t.Header.Type == OspfpacketType_LinkStateUpdate {
		return nil
	} else if t.Header.Type == OspfpacketType_LinkStateAcknowledgement {
		return nil
	} else if true {
		if _, ok := t.union185_.(*union_192_t); !ok {
			return nil // not set
		}
		tmp := []uint8(t.union185_.(*union_192_t).Data)
		return &tmp
	}
	return nil
}
func (t *Ospfpacket) SetData(v []uint8) bool {
	if t.Header.Type == OspfpacketType_Hello {
		return false
	} else if t.Header.Type == OspfpacketType_DatabaseDescription {
		return false
	} else if t.Header.Type == OspfpacketType_LinkStateRequest {
		return false
	} else if t.Header.Type == OspfpacketType_LinkStateUpdate {
		return false
	} else if t.Header.Type == OspfpacketType_LinkStateAcknowledgement {
		return false
	} else if true {
		if _, ok := t.union185_.(*union_192_t); !ok {
			t.union185_ = &union_192_t{}
		}
		t.union185_.(*union_192_t).Data = []uint8(v)
		return true
	}
	return false
}
func (t *Ospfpacket) DatabaseDescriptionPacket() *DatabaseDescriptionPacket {
	if t.Header.Type == OspfpacketType_Hello {
		return nil
	} else if t.Header.Type == OspfpacketType_DatabaseDescription {
		if _, ok := t.union185_.(*union_188_t); !ok {
			return nil // not set
		}
		tmp := DatabaseDescriptionPacket(t.union185_.(*union_188_t).DatabaseDescriptionPacket)
		return &tmp
	}
	return nil
}
func (t *Ospfpacket) SetDatabaseDescriptionPacket(v DatabaseDescriptionPacket) bool {
	if t.Header.Type == OspfpacketType_Hello {
		return false
	} else if t.Header.Type == OspfpacketType_DatabaseDescription {
		if _, ok := t.union185_.(*union_188_t); !ok {
			t.union185_ = &union_188_t{}
		}
		t.union185_.(*union_188_t).DatabaseDescriptionPacket = DatabaseDescriptionPacket(v)
		return true
	}
	return false
}
func (t *Ospfpacket) HelloPacket() *HelloPacket {
	if t.Header.Type == OspfpacketType_Hello {
		if _, ok := t.union185_.(*union_187_t); !ok {
			return nil // not set
		}
		tmp := HelloPacket(t.union185_.(*union_187_t).HelloPacket)
		return &tmp
	}
	return nil
}
func (t *Ospfpacket) SetHelloPacket(v HelloPacket) bool {
	if t.Header.Type == OspfpacketType_Hello {
		if _, ok := t.union185_.(*union_187_t); !ok {
			t.union185_ = &union_187_t{}
		}
		t.union185_.(*union_187_t).HelloPacket = HelloPacket(v)
		return true
	}
	return false
}
func (t *Ospfpacket) OspfLinkStateAcknowledgementPacket() *OspflinkStateAcknowledgementPacket {
	if t.Header.Type == OspfpacketType_Hello {
		return nil
	} else if t.Header.Type == OspfpacketType_DatabaseDescription {
		return nil
	} else if t.Header.Type == OspfpacketType_LinkStateRequest {
		return nil
	} else if t.Header.Type == OspfpacketType_LinkStateUpdate {
		return nil
	} else if t.Header.Type == OspfpacketType_LinkStateAcknowledgement {
		if _, ok := t.union185_.(*union_191_t); !ok {
			return nil // not set
		}
		tmp := OspflinkStateAcknowledgementPacket(t.union185_.(*union_191_t).OspfLinkStateAcknowledgementPacket)
		return &tmp
	}
	return nil
}
func (t *Ospfpacket) SetOspfLinkStateAcknowledgementPacket(v OspflinkStateAcknowledgementPacket) bool {
	if t.Header.Type == OspfpacketType_Hello {
		return false
	} else if t.Header.Type == OspfpacketType_DatabaseDescription {
		return false
	} else if t.Header.Type == OspfpacketType_LinkStateRequest {
		return false
	} else if t.Header.Type == OspfpacketType_LinkStateUpdate {
		return false
	} else if t.Header.Type == OspfpacketType_LinkStateAcknowledgement {
		if _, ok := t.union185_.(*union_191_t); !ok {
			t.union185_ = &union_191_t{}
		}
		t.union185_.(*union_191_t).OspfLinkStateAcknowledgementPacket = OspflinkStateAcknowledgementPacket(v)
		return true
	}
	return false
}
func (t *Ospfpacket) OspfLinkStateRequestPacket() *OspflinkStateRequestPacket {
	if t.Header.Type == OspfpacketType_Hello {
		return nil
	} else if t.Header.Type == OspfpacketType_DatabaseDescription {
		return nil
	} else if t.Header.Type == OspfpacketType_LinkStateRequest {
		if _, ok := t.union185_.(*union_189_t); !ok {
			return nil // not set
		}
		tmp := OspflinkStateRequestPacket(t.union185_.(*union_189_t).OspfLinkStateRequestPacket)
		return &tmp
	}
	return nil
}
func (t *Ospfpacket) SetOspfLinkStateRequestPacket(v OspflinkStateRequestPacket) bool {
	if t.Header.Type == OspfpacketType_Hello {
		return false
	} else if t.Header.Type == OspfpacketType_DatabaseDescription {
		return false
	} else if t.Header.Type == OspfpacketType_LinkStateRequest {
		if _, ok := t.union185_.(*union_189_t); !ok {
			t.union185_ = &union_189_t{}
		}
		t.union185_.(*union_189_t).OspfLinkStateRequestPacket = OspflinkStateRequestPacket(v)
		return true
	}
	return false
}
func (t *Ospfpacket) OspfLinkStateUpdatePacket() *OspflinkStateUpdatePacket {
	if t.Header.Type == OspfpacketType_Hello {
		return nil
	} else if t.Header.Type == OspfpacketType_DatabaseDescription {
		return nil
	} else if t.Header.Type == OspfpacketType_LinkStateRequest {
		return nil
	} else if t.Header.Type == OspfpacketType_LinkStateUpdate {
		if _, ok := t.union185_.(*union_190_t); !ok {
			return nil // not set
		}
		tmp := OspflinkStateUpdatePacket(t.union185_.(*union_190_t).OspfLinkStateUpdatePacket)
		return &tmp
	}
	return nil
}
func (t *Ospfpacket) SetOspfLinkStateUpdatePacket(v OspflinkStateUpdatePacket) bool {
	if t.Header.Type == OspfpacketType_Hello {
		return false
	} else if t.Header.Type == OspfpacketType_DatabaseDescription {
		return false
	} else if t.Header.Type == OspfpacketType_LinkStateRequest {
		return false
	} else if t.Header.Type == OspfpacketType_LinkStateUpdate {
		if _, ok := t.union185_.(*union_190_t); !ok {
			t.union185_ = &union_190_t{}
		}
		t.union185_.(*union_190_t).OspfLinkStateUpdatePacket = OspflinkStateUpdatePacket(v)
		return true
	}
	return false
}
func (t *Ospfpacket) Visit(v VisitorTIJJO) {
	v.Visit(v, "Header", &t.Header)
	v.Visit(v, "Data", (t.Data()))
	v.Visit(v, "DatabaseDescriptionPacket", (t.DatabaseDescriptionPacket()))
	v.Visit(v, "HelloPacket", (t.HelloPacket()))
	v.Visit(v, "OspfLinkStateAcknowledgementPacket", (t.OspfLinkStateAcknowledgementPacket()))
	v.Visit(v, "OspfLinkStateRequestPacket", (t.OspfLinkStateRequestPacket()))
	v.Visit(v, "OspfLinkStateUpdatePacket", (t.OspfLinkStateUpdatePacket()))
}
func (t *Ospfpacket) MarshalJSON() ([]byte, error) {
	return json.Marshal(VisitorTIJJOToMap(t))
}
func (t *Ospfpacket) Write(w io.Writer) (err error) {
	if err := t.Header.Write(w); err != nil {
		return fmt.Errorf("encode Header: %w", err)
	}
	switch {
	case (t.Header.Type == OspfpacketType_Hello):
		if _, ok := t.union185_.(*union_187_t); !ok {
			return fmt.Errorf("encode t.union185_: union is not set to union_187_t")
		}
		new_buf_193 := bytes.NewBuffer(nil)
		old_buf_193_w := w
		w = new_buf_193
		if err := t.union185_.(*union_187_t).HelloPacket.Write(w); err != nil {
			return fmt.Errorf("encode HelloPacket: %w", err)
		}
		if new_buf_193.Len() != int((t.Header.PacketLength - 16)) {
			return fmt.Errorf("encode HelloPacket: expect %d bytes but got %d bytes", new_buf_193.Len(), int((t.Header.PacketLength - 16)))
		}
		_, err = new_buf_193.WriteTo(old_buf_193_w)
		if err != nil {
			return err
		}
		w = old_buf_193_w
	case (t.Header.Type == OspfpacketType_DatabaseDescription):
		if _, ok := t.union185_.(*union_188_t); !ok {
			return fmt.Errorf("encode t.union185_: union is not set to union_188_t")
		}
		new_buf_194 := bytes.NewBuffer(nil)
		old_buf_194_w := w
		w = new_buf_194
		if err := t.union185_.(*union_188_t).DatabaseDescriptionPacket.Write(w); err != nil {
			return fmt.Errorf("encode DatabaseDescriptionPacket: %w", err)
		}
		if new_buf_194.Len() != int((t.Header.PacketLength - 16)) {
			return fmt.Errorf("encode DatabaseDescriptionPacket: expect %d bytes but got %d bytes", new_buf_194.Len(), int((t.Header.PacketLength - 16)))
		}
		_, err = new_buf_194.WriteTo(old_buf_194_w)
		if err != nil {
			return err
		}
		w = old_buf_194_w
	case (t.Header.Type == OspfpacketType_LinkStateRequest):
		if _, ok := t.union185_.(*union_189_t); !ok {
			return fmt.Errorf("encode t.union185_: union is not set to union_189_t")
		}
		new_buf_195 := bytes.NewBuffer(nil)
		old_buf_195_w := w
		w = new_buf_195
		if err := t.union185_.(*union_189_t).OspfLinkStateRequestPacket.Write(w); err != nil {
			return fmt.Errorf("encode OspfLinkStateRequestPacket: %w", err)
		}
		if new_buf_195.Len() != int((t.Header.PacketLength - 16)) {
			return fmt.Errorf("encode OspfLinkStateRequestPacket: expect %d bytes but got %d bytes", new_buf_195.Len(), int((t.Header.PacketLength - 16)))
		}
		_, err = new_buf_195.WriteTo(old_buf_195_w)
		if err != nil {
			return err
		}
		w = old_buf_195_w
	case (t.Header.Type == OspfpacketType_LinkStateUpdate):
		if _, ok := t.union185_.(*union_190_t); !ok {
			return fmt.Errorf("encode t.union185_: union is not set to union_190_t")
		}
		new_buf_196 := bytes.NewBuffer(nil)
		old_buf_196_w := w
		w = new_buf_196
		if err := t.union185_.(*union_190_t).OspfLinkStateUpdatePacket.Write(w); err != nil {
			return fmt.Errorf("encode OspfLinkStateUpdatePacket: %w", err)
		}
		if new_buf_196.Len() != int((t.Header.PacketLength - 16)) {
			return fmt.Errorf("encode OspfLinkStateUpdatePacket: expect %d bytes but got %d bytes", new_buf_196.Len(), int((t.Header.PacketLength - 16)))
		}
		_, err = new_buf_196.WriteTo(old_buf_196_w)
		if err != nil {
			return err
		}
		w = old_buf_196_w
	case (t.Header.Type == OspfpacketType_LinkStateAcknowledgement):
		if _, ok := t.union185_.(*union_191_t); !ok {
			return fmt.Errorf("encode t.union185_: union is not set to union_191_t")
		}
		new_buf_197 := bytes.NewBuffer(nil)
		old_buf_197_w := w
		w = new_buf_197
		if err := t.union185_.(*union_191_t).OspfLinkStateAcknowledgementPacket.Write(w); err != nil {
			return fmt.Errorf("encode OspfLinkStateAcknowledgementPacket: %w", err)
		}
		if new_buf_197.Len() != int((t.Header.PacketLength - 16)) {
			return fmt.Errorf("encode OspfLinkStateAcknowledgementPacket: expect %d bytes but got %d bytes", new_buf_197.Len(), int((t.Header.PacketLength - 16)))
		}
		_, err = new_buf_197.WriteTo(old_buf_197_w)
		if err != nil {
			return err
		}
		w = old_buf_197_w
	default:
		if _, ok := t.union185_.(*union_192_t); !ok {
			return fmt.Errorf("encode t.union185_: union is not set to union_192_t")
		}
		len_Data := int((t.Header.PacketLength - 16))
		if len(t.union185_.(*union_192_t).Data) != len_Data {
			return fmt.Errorf("encode Data: expect %d bytes but got %d bytes", len_Data, len(t.union185_.(*union_192_t).Data))
		}
		if n, err := w.Write(t.union185_.(*union_192_t).Data); err != nil || n != len(t.union185_.(*union_192_t).Data) {
			return fmt.Errorf("encode Data: %w", err)
		}
	}
	return nil
}
func (t *Ospfpacket) Encode() ([]byte, error) {
	w := bytes.NewBuffer(make([]byte, 0, 16))
	if err := t.Write(w); err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func (t *Ospfpacket) MustEncode() []byte {
	buf, err := t.Encode()
	if err != nil {
		panic(err)
	}
	return buf
}
func (t *Ospfpacket) Read(r io.Reader) (err error) {
	if err := t.Header.Read(r); err != nil {
		return fmt.Errorf("read Header: %w", err)
	}
	switch {
	case (t.Header.Type == OspfpacketType_Hello):
		t.union185_ = &union_187_t{}
		sub_byte_len_HelloPacket := int64((t.Header.PacketLength - 16))
		sub_byte_r_HelloPacket := io.LimitReader(r, int64(sub_byte_len_HelloPacket))
		tmp_old_r_HelloPacket_198 := r
		r = sub_byte_r_HelloPacket
		if err := t.union185_.(*union_187_t).HelloPacket.Read(r); err != nil {
			return fmt.Errorf("read HelloPacket: %w", err)
		}
		if sub_byte_r_HelloPacket.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read HelloPacket: expect %d bytes but got %d bytes", sub_byte_len_HelloPacket, sub_byte_len_HelloPacket-sub_byte_r_HelloPacket.(*io.LimitedReader).N)
		}
		r = tmp_old_r_HelloPacket_198
	case (t.Header.Type == OspfpacketType_DatabaseDescription):
		t.union185_ = &union_188_t{}
		sub_byte_len_DatabaseDescriptionPacket := int64((t.Header.PacketLength - 16))
		sub_byte_r_DatabaseDescriptionPacket := io.LimitReader(r, int64(sub_byte_len_DatabaseDescriptionPacket))
		tmp_old_r_DatabaseDescriptionPacket_199 := r
		r = sub_byte_r_DatabaseDescriptionPacket
		if err := t.union185_.(*union_188_t).DatabaseDescriptionPacket.Read(r); err != nil {
			return fmt.Errorf("read DatabaseDescriptionPacket: %w", err)
		}
		if sub_byte_r_DatabaseDescriptionPacket.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read DatabaseDescriptionPacket: expect %d bytes but got %d bytes", sub_byte_len_DatabaseDescriptionPacket, sub_byte_len_DatabaseDescriptionPacket-sub_byte_r_DatabaseDescriptionPacket.(*io.LimitedReader).N)
		}
		r = tmp_old_r_DatabaseDescriptionPacket_199
	case (t.Header.Type == OspfpacketType_LinkStateRequest):
		t.union185_ = &union_189_t{}
		sub_byte_len_OspfLinkStateRequestPacket := int64((t.Header.PacketLength - 16))
		sub_byte_r_OspfLinkStateRequestPacket := io.LimitReader(r, int64(sub_byte_len_OspfLinkStateRequestPacket))
		tmp_old_r_OspfLinkStateRequestPacket_200 := r
		r = sub_byte_r_OspfLinkStateRequestPacket
		if err := t.union185_.(*union_189_t).OspfLinkStateRequestPacket.Read(r); err != nil {
			return fmt.Errorf("read OspfLinkStateRequestPacket: %w", err)
		}
		if sub_byte_r_OspfLinkStateRequestPacket.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read OspfLinkStateRequestPacket: expect %d bytes but got %d bytes", sub_byte_len_OspfLinkStateRequestPacket, sub_byte_len_OspfLinkStateRequestPacket-sub_byte_r_OspfLinkStateRequestPacket.(*io.LimitedReader).N)
		}
		r = tmp_old_r_OspfLinkStateRequestPacket_200
	case (t.Header.Type == OspfpacketType_LinkStateUpdate):
		t.union185_ = &union_190_t{}
		sub_byte_len_OspfLinkStateUpdatePacket := int64((t.Header.PacketLength - 16))
		sub_byte_r_OspfLinkStateUpdatePacket := io.LimitReader(r, int64(sub_byte_len_OspfLinkStateUpdatePacket))
		tmp_old_r_OspfLinkStateUpdatePacket_201 := r
		r = sub_byte_r_OspfLinkStateUpdatePacket
		if err := t.union185_.(*union_190_t).OspfLinkStateUpdatePacket.Read(r); err != nil {
			return fmt.Errorf("read OspfLinkStateUpdatePacket: %w", err)
		}
		if sub_byte_r_OspfLinkStateUpdatePacket.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read OspfLinkStateUpdatePacket: expect %d bytes but got %d bytes", sub_byte_len_OspfLinkStateUpdatePacket, sub_byte_len_OspfLinkStateUpdatePacket-sub_byte_r_OspfLinkStateUpdatePacket.(*io.LimitedReader).N)
		}
		r = tmp_old_r_OspfLinkStateUpdatePacket_201
	case (t.Header.Type == OspfpacketType_LinkStateAcknowledgement):
		t.union185_ = &union_191_t{}
		sub_byte_len_OspfLinkStateAcknowledgementPacket := int64((t.Header.PacketLength - 16))
		sub_byte_r_OspfLinkStateAcknowledgementPacket := io.LimitReader(r, int64(sub_byte_len_OspfLinkStateAcknowledgementPacket))
		tmp_old_r_OspfLinkStateAcknowledgementPacket_202 := r
		r = sub_byte_r_OspfLinkStateAcknowledgementPacket
		if err := t.union185_.(*union_191_t).OspfLinkStateAcknowledgementPacket.Read(r); err != nil {
			return fmt.Errorf("read OspfLinkStateAcknowledgementPacket: %w", err)
		}
		if sub_byte_r_OspfLinkStateAcknowledgementPacket.(*io.LimitedReader).N != 0 {
			return fmt.Errorf("read OspfLinkStateAcknowledgementPacket: expect %d bytes but got %d bytes", sub_byte_len_OspfLinkStateAcknowledgementPacket, sub_byte_len_OspfLinkStateAcknowledgementPacket-sub_byte_r_OspfLinkStateAcknowledgementPacket.(*io.LimitedReader).N)
		}
		r = tmp_old_r_OspfLinkStateAcknowledgementPacket_202
	default:
		t.union185_ = &union_192_t{}
		len_Data := int((t.Header.PacketLength - 16))
		if len_Data != 0 {
			tmpData := make([]byte, len_Data)
			n_Data, err := io.ReadFull(r, tmpData[:])
			if err != nil {
				return fmt.Errorf("read Data: expect %d bytes but read %d bytes: %w", len_Data, n_Data, err)
			}
			t.union185_.(*union_192_t).Data = tmpData[:]
		} else {
			t.union185_.(*union_192_t).Data = nil
		}
	}
	return nil
}

func (t *Ospfpacket) Decode(d []byte) (int, error) {
	r := bytes.NewReader(d)
	err := t.Read(r)
	return int(int(r.Size()) - r.Len()), err
}
func (t *Ospfpacket) DecodeExact(d []byte) error {
	if n, err := t.Decode(d); err != nil {
		return err
	} else if n != len(d) {
		return fmt.Errorf("decode Ospfpacket: expect %d bytes but got %d bytes", len(d), n)
	}
	return nil
}
